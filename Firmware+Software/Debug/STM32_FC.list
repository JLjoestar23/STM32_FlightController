
STM32_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800818c  0800818c  0000918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  0000a14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008234  08008234  00009234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008238  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a14c  2**0
                  CONTENTS
 10 .bss          00001e38  2000014c  2000014c  0000a14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f84  20001f84  0000a14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c8d  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310a  00000000  00000000  0001ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbe  00000000  00000000  00020e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218a2  00000000  00000000  00021a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001405d  00000000  00000000  000432f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bde67  00000000  00000000  00057355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001151bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044a4  00000000  00000000  00115200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001196a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008174 	.word	0x08008174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008174 	.word	0x08008174

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fb51 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f82b 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f91d 	bl	80007f8 <MX_GPIO_Init>
  MX_SPI3_Init();
 80005be:	f000 f891 	bl	80006e4 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f8c5 	bl	8000750 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c6:	f000 f8ed 	bl	80007a4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005ca:	f006 fc19 	bl	8006e00 <MX_USB_DEVICE_Init>

  char example_buff[8];
  uint8_t count = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */

  while (1)
  {
	  sprintf(example_buff, "%u\r\n", count);
 80005d2:	7bfa      	ldrb	r2, [r7, #15]
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	490d      	ldr	r1, [pc, #52]	@ (800060c <main+0x60>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 f92b 	bl	8007834 <siprintf>
	  count++;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
	  if (count > 126) {
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80005e8:	d901      	bls.n	80005ee <main+0x42>
		  count = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
	  }

	  CDC_Transmit_FS((uint8_t *) example_buff, strlen(example_buff));
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fded 	bl	80001d0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 fcbc 	bl	8006f7c <CDC_Transmit_FS>

	  HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	@ 0x64
 8000606:	f000 fb99 	bl	8000d3c <HAL_Delay>
	  sprintf(example_buff, "%u\r\n", count);
 800060a:	e7e2      	b.n	80005d2 <main+0x26>
 800060c:	0800818c 	.word	0x0800818c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 f92a 	bl	8007878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	@ 0xa8
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 f88f 	bl	80027b8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f91a 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 faf0 	bl	8002ca8 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f903 	bl	80008d8 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_SPI3_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	@ (800074c <MX_SPI3_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_SPI3_Init+0x64>)
 80006f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_SPI3_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_SPI3_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_SPI3_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_SPI3_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_SPI3_Init+0x64>)
 8000710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000714:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_SPI3_Init+0x64>)
 8000718:	2208      	movs	r2, #8
 800071a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_SPI3_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_SPI3_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <MX_SPI3_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_SPI3_Init+0x64>)
 8000730:	220a      	movs	r2, #10
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_SPI3_Init+0x64>)
 8000736:	f002 fcd7 	bl	80030e8 <HAL_SPI_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000740:	f000 f8ca 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000168 	.word	0x20000168
 800074c:	40003c00 	.word	0x40003c00

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f002 fd37 	bl	80031fa <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f8a1 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001c0 	.word	0x200001c0
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART3_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007dc:	f002 fd0d 	bl	80031fa <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f877 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000208 	.word	0x20000208
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a2d      	ldr	r2, [pc, #180]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a26      	ldr	r2, [pc, #152]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <MX_GPIO_Init+0xd4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <MX_GPIO_Init+0xd4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S4_Pin|S3_Pin|S2_Pin|S1_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8000884:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_GPIO_Init+0xd8>)
 8000886:	f000 fd2b 	bl	80012e0 <HAL_GPIO_WritePin>
                          |CS2_Pin|CS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : S4_Pin S3_Pin S2_Pin S1_Pin
                           CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin|S2_Pin|S1_Pin
 800088a:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 800088e:	617b      	str	r3, [r7, #20]
                          |CS2_Pin|CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <MX_GPIO_Init+0xd8>)
 80008a4:	f000 fb80 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin;
 80008a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_GPIO_Init+0xdc>)
 80008c0:	f000 fb72 	bl	8000fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	@ 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a28      	ldr	r2, [pc, #160]	@ (80009f4 <HAL_SPI_MspInit+0xc0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d14a      	bne.n	80009ec <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a26      	ldr	r2, [pc, #152]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 8000960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a1f      	ldr	r2, [pc, #124]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <HAL_SPI_MspInit+0xc4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009bc:	2306      	movs	r3, #6
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <HAL_SPI_MspInit+0xc8>)
 80009c8:	f000 faee 	bl	8000fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009cc:	2330      	movs	r3, #48	@ 0x30
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009dc:	2306      	movs	r3, #6
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <HAL_SPI_MspInit+0xcc>)
 80009e8:	f000 fade 	bl	8000fa8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40003c00 	.word	0x40003c00
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020400 	.word	0x40020400

08000a04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	@ 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a32      	ldr	r2, [pc, #200]	@ (8000aec <HAL_UART_MspInit+0xe8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a30      	ldr	r2, [pc, #192]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a29      	ldr	r2, [pc, #164]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <HAL_UART_MspInit+0xf0>)
 8000a7a:	f000 fa95 	bl	8000fa8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a7e:	e031      	b.n	8000ae4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1c      	ldr	r2, [pc, #112]	@ (8000af8 <HAL_UART_MspInit+0xf4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12c      	bne.n	8000ae4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_UART_MspInit+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8000ac2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <HAL_UART_MspInit+0xf8>)
 8000ae0:	f000 fa62 	bl	8000fa8 <HAL_GPIO_Init>
}
 8000ae4:	bf00      	nop
 8000ae6:	3730      	adds	r7, #48	@ 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40004800 	.word	0x40004800
 8000afc:	40020400 	.word	0x40020400

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f8d1 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <OTG_FS_IRQHandler+0x10>)
 8000b66:	f000 fd18 	bl	800159a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20001738 	.word	0x20001738

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f006 fe70 	bl	8007888 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20020000 	.word	0x20020000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	20000250 	.word	0x20000250
 8000bdc:	20001f88 	.word	0x20001f88

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	@ (8000c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f006 fe2f 	bl	8007894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fcb9 	bl	80005ac <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000c48:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 8000c4c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000c50:	20001f84 	.word	0x20001f84

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f94f 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe2a 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f967 	bl	8000f8e <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f92f 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000254 	.word	0x20000254

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	@ (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000254 	.word	0x20000254

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	@ (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	@ (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	@ (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff29 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff3e 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff8e 	bl	8000e78 <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff31 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffa2 	bl	8000ee0 <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e16b      	b.n	800129c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 815a 	bne.w	8001296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80b4 	beq.w	8001296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a5f      	ldr	r2, [pc, #380]	@ (80012b4 <HAL_GPIO_Init+0x30c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b5d      	ldr	r3, [pc, #372]	@ (80012b4 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a5b      	ldr	r2, [pc, #364]	@ (80012b8 <HAL_GPIO_Init+0x310>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a52      	ldr	r2, [pc, #328]	@ (80012bc <HAL_GPIO_Init+0x314>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x226>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	@ (80012c0 <HAL_GPIO_Init+0x318>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x222>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	@ (80012c4 <HAL_GPIO_Init+0x31c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x21e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	@ (80012c8 <HAL_GPIO_Init+0x320>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x21a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	@ (80012cc <HAL_GPIO_Init+0x324>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x216>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	@ (80012d0 <HAL_GPIO_Init+0x328>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x212>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <HAL_GPIO_Init+0x32c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x20e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <HAL_GPIO_Init+0x330>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x20a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00e      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	@ (80012b8 <HAL_GPIO_Init+0x310>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_GPIO_Init+0x334>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a32      	ldr	r2, [pc, #200]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_GPIO_Init+0x334>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a27      	ldr	r2, [pc, #156]	@ (80012dc <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_GPIO_Init+0x334>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f ae90 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af02      	add	r7, sp, #8
 8001318:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e101      	b.n	8001528 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f005 ff64 	bl	800720c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001352:	d102      	bne.n	800135a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fb27 	bl	80039b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7c1a      	ldrb	r2, [r3, #16]
 800136c:	f88d 2000 	strb.w	r2, [sp]
 8001370:	3304      	adds	r3, #4
 8001372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001374:	f002 fa06 	bl	8003784 <USB_CoreInit>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2202      	movs	r2, #2
 8001382:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0ce      	b.n	8001528 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fb1f 	bl	80039d4 <USB_SetCurrentMode>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0bf      	b.n	8001528 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e04a      	b.n	8001444 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3315      	adds	r3, #21
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3314      	adds	r3, #20
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b298      	uxth	r0, r3
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	332e      	adds	r3, #46	@ 0x2e
 80013ea:	4602      	mov	r2, r0
 80013ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3318      	adds	r3, #24
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	331c      	adds	r3, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3320      	adds	r3, #32
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3324      	adds	r3, #36	@ 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3af      	bcc.n	80013ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e044      	b.n	80014de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3301      	adds	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3b5      	bcc.n	8001454 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7c1a      	ldrb	r2, [r3, #16]
 80014f0:	f88d 2000 	strb.w	r2, [sp]
 80014f4:	3304      	adds	r3, #4
 80014f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f8:	f002 fab8 	bl	8003a6c <USB_DevInit>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2202      	movs	r2, #2
 8001506:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00c      	b.n	8001528 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fb02 	bl	8004b2a <USB_DevDisconnect>

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_PCD_Start+0x1c>
 8001548:	2302      	movs	r3, #2
 800154a:	e022      	b.n	8001592 <HAL_PCD_Start+0x62>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800156c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fa09 	bl	8003990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fab0 	bl	8004ae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800159a:	b590      	push	{r4, r7, lr}
 800159c:	b08d      	sub	sp, #52	@ 0x34
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fb6e 	bl	8004c92 <USB_GetMode>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 848c 	bne.w	8001ed6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fad2 	bl	8004b6c <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8482 	beq.w	8001ed4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fabf 	bl	8004b6c <USB_ReadInterrupts>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d107      	bne.n	8001608 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f002 0202 	and.w	r2, r2, #2
 8001606:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 faad 	bl	8004b6c <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b10      	cmp	r3, #16
 800161a:	d161      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0210 	bic.w	r2, r2, #16
 800162a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 020f 	and.w	r2, r3, #15
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001656:	d124      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d035      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800166e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	6a38      	ldr	r0, [r7, #32]
 8001678:	f003 f8e4 	bl	8004844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001688:	441a      	add	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169a:	441a      	add	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	e016      	b.n	80016d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80016a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80016ac:	d110      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016b4:	2208      	movs	r2, #8
 80016b6:	4619      	mov	r1, r3
 80016b8:	6a38      	ldr	r0, [r7, #32]
 80016ba:	f003 f8c3 	bl	8004844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ca:	441a      	add	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0210 	orr.w	r2, r2, #16
 80016de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fa41 	bl	8004b6c <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80016f4:	f040 80a7 	bne.w	8001846 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fa46 	bl	8004b92 <USB_ReadDevAllOutEpInterrupt>
 8001706:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001708:	e099      	b.n	800183e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800170a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 808e 	beq.w	8001832 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fa6a 	bl	8004bfa <USB_ReadDevOutEPInterrupt>
 8001726:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800173e:	461a      	mov	r2, r3
 8001740:	2301      	movs	r3, #1
 8001742:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fea4 	bl	8002494 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001762:	461a      	mov	r2, r3
 8001764:	2308      	movs	r3, #8
 8001766:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 ff7a 	bl	8002664 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001786:	461a      	mov	r2, r3
 8001788:	2310      	movs	r3, #16
 800178a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d030      	beq.n	80017f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179e:	2b80      	cmp	r3, #128	@ 0x80
 80017a0:	d109      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	78db      	ldrb	r3, [r3, #3]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d108      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2200      	movs	r2, #0
 80017d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f005 fe19 	bl	8007418 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017f2:	461a      	mov	r2, r3
 80017f4:	2302      	movs	r3, #2
 80017f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800180e:	461a      	mov	r2, r3
 8001810:	2320      	movs	r3, #32
 8001812:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800182a:	461a      	mov	r2, r3
 800182c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001830:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800183e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f af62 	bne.w	800170a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f003 f98e 	bl	8004b6c <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800185a:	f040 80db 	bne.w	8001a14 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f003 f9af 	bl	8004bc6 <USB_ReadDevAllInEpInterrupt>
 8001868:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800186e:	e0cd      	b.n	8001a0c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80c2 	beq.w	8001a00 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f9d5 	bl	8004c36 <USB_ReadDevInEPInterrupt>
 800188c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d057      	beq.n	8001948 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	2201      	movs	r2, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69f9      	ldr	r1, [r7, #28]
 80018b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80018b8:	4013      	ands	r3, r2
 80018ba:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018c8:	461a      	mov	r2, r3
 80018ca:	2301      	movs	r3, #1
 80018cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	799b      	ldrb	r3, [r3, #6]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d132      	bne.n	800193c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	3320      	adds	r3, #32
 80018e6:	6819      	ldr	r1, [r3, #0]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4403      	add	r3, r0
 80018f6:	331c      	adds	r3, #28
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4419      	add	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4403      	add	r3, r0
 800190a:	3320      	adds	r3, #32
 800190c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	d113      	bne.n	800193c <HAL_PCD_IRQHandler+0x3a2>
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3324      	adds	r3, #36	@ 0x24
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001934:	461a      	mov	r2, r3
 8001936:	2101      	movs	r1, #1
 8001938:	f003 f9dc 	bl	8004cf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f005 fce3 	bl	800730e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800195e:	461a      	mov	r2, r3
 8001960:	2308      	movs	r3, #8
 8001962:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800197a:	461a      	mov	r2, r3
 800197c:	2310      	movs	r3, #16
 800197e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001996:	461a      	mov	r2, r3
 8001998:	2340      	movs	r3, #64	@ 0x40
 800199a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a8:	6a38      	ldr	r0, [r7, #32]
 80019aa:	f002 f9c3 	bl	8003d34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	3310      	adds	r3, #16
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	78db      	ldrb	r3, [r3, #3]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2200      	movs	r2, #0
 80019ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f005 fd30 	bl	800743c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019e8:	461a      	mov	r2, r3
 80019ea:	2302      	movs	r3, #2
 80019ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fcbd 	bl	800237a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	3301      	adds	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f47f af2e 	bne.w	8001870 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 f8a7 	bl	8004b6c <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a28:	d122      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a50:	2100      	movs	r1, #0
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fea4 	bl	80027a0 <HAL_PCDEx_LPM_Callback>
 8001a58:	e002      	b.n	8001a60 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f005 fcce 	bl	80073fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f879 	bl	8004b6c <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a84:	d112      	bne.n	8001aac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f005 fc8a 	bl	80073b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001aaa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 f85b 	bl	8004b6c <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ac0:	f040 80b7 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2110      	movs	r1, #16
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f928 	bl	8003d34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ae8:	e046      	b.n	8001b78 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001af6:	461a      	mov	r2, r3
 8001af8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001afc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b0e:	0151      	lsls	r1, r2, #5
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	440a      	add	r2, r1
 8001b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b42:	0151      	lsls	r1, r2, #5
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	440a      	add	r2, r1
 8001b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b62:	0151      	lsls	r1, r2, #5
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	440a      	add	r2, r1
 8001b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b74:	3301      	adds	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d3b2      	bcc.n	8001aea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b92:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7bdb      	ldrb	r3, [r3, #15]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d016      	beq.n	8001bce <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bb0:	f043 030b 	orr.w	r3, r3, #11
 8001bb4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc6:	f043 030b 	orr.w	r3, r3, #11
 8001bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bcc:	e015      	b.n	8001bfa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001be0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001be4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bf4:	f043 030b 	orr.w	r3, r3, #11
 8001bf8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c08:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f003 f869 	bl	8004cf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ff98 	bl	8004b6c <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c46:	d123      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f82e 	bl	8004cae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f8e5 	bl	8003e26 <USB_GetDevSpeed>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	f001 fa0a 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c72:	461a      	mov	r2, r3
 8001c74:	4620      	mov	r0, r4
 8001c76:	f001 fde9 	bl	800384c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f005 fb6f 	bl	800735e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 ff69 	bl	8004b6c <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d10a      	bne.n	8001cba <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f005 fb4c 	bl	8007342 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f002 0208 	and.w	r2, r2, #8
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 ff54 	bl	8004b6c <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b80      	cmp	r3, #128	@ 0x80
 8001ccc:	d123      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cda:	2301      	movs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cde:	e014      	b.n	8001d0a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fb0a 	bl	8002318 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	3301      	adds	r3, #1
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	791b      	ldrb	r3, [r3, #4]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d3e4      	bcc.n	8001ce0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 ff26 	bl	8004b6c <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d2a:	d13c      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d30:	e02b      	b.n	8001d8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3318      	adds	r3, #24
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d115      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da12      	bge.n	8001d84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3317      	adds	r3, #23
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 faca 	bl	8002318 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	3301      	adds	r3, #1
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	791b      	ldrb	r3, [r3, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d3cd      	bcc.n	8001d32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fede 	bl	8004b6c <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dba:	d156      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc0:	e045      	b.n	8001e4e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12e      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da2b      	bge.n	8001e48 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	0c1a      	lsrs	r2, r3, #16
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001dfa:	4053      	eors	r3, r2
 8001dfc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d121      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e44:	6053      	str	r3, [r2, #4]
            break;
 8001e46:	e008      	b.n	8001e5a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	791b      	ldrb	r3, [r3, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d3b3      	bcc.n	8001dc2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fe7c 	bl	8004b6c <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7e:	d10a      	bne.n	8001e96 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f005 faed 	bl	8007460 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fe66 	bl	8004b6c <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d115      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f005 fadd 	bl	800747c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e000      	b.n	8001ed6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ed4:	bf00      	nop
    }
  }
}
 8001ed6:	3734      	adds	r7, #52	@ 0x34
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}

08001edc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_SetAddress+0x1a>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e012      	b.n	8001f1c <HAL_PCD_SetAddress+0x40>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fdc5 	bl	8004a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	70fb      	strb	r3, [r7, #3]
 8001f36:	460b      	mov	r3, r1
 8001f38:	803b      	strh	r3, [r7, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da0f      	bge.n	8001f6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3310      	adds	r3, #16
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	705a      	strb	r2, [r3, #1]
 8001f68:	e00f      	b.n	8001f8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f96:	883b      	ldrh	r3, [r7, #0]
 8001f98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	78ba      	ldrb	r2, [r7, #2]
 8001fa4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fb8:	78bb      	ldrb	r3, [r7, #2]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d102      	bne.n	8001fc4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_PCD_EP_Open+0xae>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e00e      	b.n	8001ff0 <HAL_PCD_EP_Open+0xcc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68f9      	ldr	r1, [r7, #12]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 ff45 	bl	8003e70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001fee:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002008:	2b00      	cmp	r3, #0
 800200a:	da0f      	bge.n	800202c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 020f 	and.w	r2, r3, #15
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	3310      	adds	r3, #16
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	705a      	strb	r2, [r3, #1]
 800202a:	e00f      	b.n	800204c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_PCD_EP_Close+0x6e>
 8002062:	2302      	movs	r3, #2
 8002064:	e00e      	b.n	8002084 <HAL_PCD_EP_Close+0x8c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	4618      	mov	r0, r3
 8002076:	f001 ff83 	bl	8003f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	460b      	mov	r3, r1
 800209a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	799b      	ldrb	r3, [r3, #6]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	799b      	ldrb	r3, [r3, #6]
 80020f0:	461a      	mov	r2, r3
 80020f2:	6979      	ldr	r1, [r7, #20]
 80020f4:	f002 f820 	bl	8004138 <USB_EPStartXfer>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002124:	681b      	ldr	r3, [r3, #0]
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3310      	adds	r3, #16
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2201      	movs	r2, #1
 8002170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	b2da      	uxtb	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	799b      	ldrb	r3, [r3, #6]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	799b      	ldrb	r3, [r3, #6]
 8002194:	461a      	mov	r2, r3
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	f001 ffce 	bl	8004138 <USB_EPStartXfer>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	7912      	ldrb	r2, [r2, #4]
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e04f      	b.n	8002264 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0f      	bge.n	80021ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3310      	adds	r3, #16
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	705a      	strb	r2, [r3, #1]
 80021ea:	e00d      	b.n	8002208 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_PCD_EP_SetStall+0x82>
 8002224:	2302      	movs	r3, #2
 8002226:	e01d      	b.n	8002264 <HAL_PCD_EP_SetStall+0xbe>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fb5c 	bl	80048f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7999      	ldrb	r1, [r3, #6]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002254:	461a      	mov	r2, r3
 8002256:	f002 fd4d 	bl	8004cf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	7912      	ldrb	r2, [r2, #4]
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e042      	b.n	8002310 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800228a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da0f      	bge.n	80022b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 020f 	and.w	r2, r3, #15
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	3310      	adds	r3, #16
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	3304      	adds	r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	705a      	strb	r2, [r3, #1]
 80022b0:	e00f      	b.n	80022d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_ClrStall+0x86>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e00e      	b.n	8002310 <HAL_PCD_EP_ClrStall+0xa4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f002 fb65 	bl	80049d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002328:	2b00      	cmp	r3, #0
 800232a:	da0c      	bge.n	8002346 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 020f 	and.w	r2, r3, #15
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3310      	adds	r3, #16
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	3304      	adds	r3, #4
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e00c      	b.n	8002360 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f002 f984 	bl	8004674 <USB_EPStopXfer>
 800236c:	4603      	mov	r3, r0
 800236e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002370:	7afb      	ldrb	r3, [r7, #11]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b08a      	sub	sp, #40	@ 0x28
 800237e:	af02      	add	r7, sp, #8
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	3310      	adds	r3, #16
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d901      	bls.n	80023b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d902      	bls.n	80023ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3303      	adds	r3, #3
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d6:	e02a      	b.n	800242e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d902      	bls.n	80023f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3303      	adds	r3, #3
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68d9      	ldr	r1, [r3, #12]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4603      	mov	r3, r0
 8002410:	6978      	ldr	r0, [r7, #20]
 8002412:	f002 f9d9 	bl	80047c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	441a      	add	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	441a      	add	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	429a      	cmp	r2, r3
 8002442:	d809      	bhi.n	8002458 <PCD_WriteEmptyTxFifo+0xde>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800244c:	429a      	cmp	r2, r3
 800244e:	d203      	bcs.n	8002458 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1bf      	bne.n	80023d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	d811      	bhi.n	8002488 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	2201      	movs	r2, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	43db      	mvns	r3, r3
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002484:	4013      	ands	r3, r2
 8002486:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	333c      	adds	r3, #60	@ 0x3c
 80024ac:	3304      	adds	r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	799b      	ldrb	r3, [r3, #6]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d17b      	bne.n	80025c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	4a61      	ldr	r2, [pc, #388]	@ (800265c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	f240 80b9 	bls.w	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80b3 	beq.w	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f6:	461a      	mov	r2, r3
 80024f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024fc:	6093      	str	r3, [r2, #8]
 80024fe:	e0a7      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002516:	461a      	mov	r2, r3
 8002518:	2320      	movs	r3, #32
 800251a:	6093      	str	r3, [r2, #8]
 800251c:	e098      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8093 	bne.w	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	4a4b      	ldr	r2, [pc, #300]	@ (800265c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d90f      	bls.n	8002552 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800254e:	6093      	str	r3, [r2, #8]
 8002550:	e07e      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	0159      	lsls	r1, r3, #5
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	440b      	add	r3, r1
 8002574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d114      	bne.n	80025b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800259c:	461a      	mov	r2, r3
 800259e:	2101      	movs	r1, #1
 80025a0:	f002 fba8 	bl	8004cf4 <USB_EP0_OutStart>
 80025a4:	e006      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	441a      	add	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f004 fe8c 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
 80025c0:	e046      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d124      	bne.n	8002614 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025e6:	6093      	str	r3, [r2, #8]
 80025e8:	e032      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002600:	461a      	mov	r2, r3
 8002602:	2320      	movs	r3, #32
 8002604:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f004 fe63 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
 8002612:	e01d      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <PCD_EP_OutXfrComplete_int+0x1b0>
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800263c:	461a      	mov	r2, r3
 800263e:	2100      	movs	r1, #0
 8002640:	f002 fb58 	bl	8004cf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f004 fe44 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	4f54300a 	.word	0x4f54300a
 8002660:	4f54310a 	.word	0x4f54310a

08002664 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	333c      	adds	r3, #60	@ 0x3c
 800267c:	3304      	adds	r3, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d90e      	bls.n	80026b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f004 fdfb 	bl	80072b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <PCD_EP_OutSetupPacket_int+0x88>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d90c      	bls.n	80026e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	799b      	ldrb	r3, [r3, #6]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026d8:	461a      	mov	r2, r3
 80026da:	2101      	movs	r1, #1
 80026dc:	f002 fb0a 	bl	8004cf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	4f54300a 	.word	0x4f54300a

080026f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
 80026fc:	4613      	mov	r3, r2
 80026fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800270e:	883b      	ldrh	r3, [r7, #0]
 8002710:	0419      	lsls	r1, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	430a      	orrs	r2, r1
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
 800271c:	e028      	b.n	8002770 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e00d      	b.n	800274e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3340      	adds	r3, #64	@ 0x40
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4413      	add	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	3b01      	subs	r3, #1
 8002754:	429a      	cmp	r2, r3
 8002756:	d3ec      	bcc.n	8002732 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002758:	883b      	ldrh	r3, [r7, #0]
 800275a:	0418      	lsls	r0, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	3b01      	subs	r3, #1
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	4302      	orrs	r2, r0
 8002768:	3340      	adds	r3, #64	@ 0x40
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e267      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d075      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027d6:	4b88      	ldr	r3, [pc, #544]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b85      	ldr	r3, [pc, #532]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b82      	ldr	r3, [pc, #520]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b7e      	ldr	r3, [pc, #504]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x108>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e242      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x74>
 800281e:	4b76      	ldr	r3, [pc, #472]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b70      	ldr	r3, [pc, #448]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6f      	ldr	r2, [pc, #444]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6d      	ldr	r3, [pc, #436]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 8002850:	4b69      	ldr	r3, [pc, #420]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b66      	ldr	r3, [pc, #408]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a65      	ldr	r2, [pc, #404]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fa58 	bl	8000d24 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fa54 	bl	8000d24 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e207      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xc0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fa44 	bl	8000d24 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fa40 	bl	8000d24 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1f3      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b51      	ldr	r3, [pc, #324]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0xe8>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ce:	4b4a      	ldr	r3, [pc, #296]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b47      	ldr	r3, [pc, #284]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b44      	ldr	r3, [pc, #272]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c7      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4937      	ldr	r1, [pc, #220]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe f9f9 	bl	8000d24 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe f9f5 	bl	8000d24 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a8      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2b      	ldr	r3, [pc, #172]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b28      	ldr	r3, [pc, #160]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4925      	ldr	r1, [pc, #148]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe f9d8 	bl	8000d24 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe f9d4 	bl	8000d24 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e187      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d036      	beq.n	8002a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe f9b8 	bl	8000d24 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe f9b4 	bl	8000d24 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e167      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x200>
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe f9a1 	bl	8000d24 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	e00e      	b.n	8002a04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe f99d 	bl	8000d24 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d907      	bls.n	8002a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e150      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ea      	bne.n	80029e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8097 	beq.w	8002b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b81      	ldr	r3, [pc, #516]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b7d      	ldr	r3, [pc, #500]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	4a7c      	ldr	r2, [pc, #496]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b77      	ldr	r3, [pc, #476]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b74      	ldr	r3, [pc, #464]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a73      	ldr	r2, [pc, #460]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe f95d 	bl	8000d24 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe f959 	bl	8000d24 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
 8002a94:	4b64      	ldr	r3, [pc, #400]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a63      	ldr	r2, [pc, #396]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x30c>
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	4a5e      	ldr	r2, [pc, #376]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002ac4:	4b58      	ldr	r3, [pc, #352]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4a57      	ldr	r2, [pc, #348]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad0:	4b55      	ldr	r3, [pc, #340]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a54      	ldr	r2, [pc, #336]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe f91e 	bl	8000d24 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe f91a 	bl	8000d24 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0cb      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x334>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe f908 	bl	8000d24 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe f904 	bl	8000d24 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0b5      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	4a38      	ldr	r2, [pc, #224]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a1 	beq.w	8002c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b56:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d05c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d141      	bne.n	8002bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe f8d8 	bl	8000d24 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe f8d4 	bl	8000d24 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e087      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	491b      	ldr	r1, [pc, #108]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f8ad 	bl	8000d24 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe f8a9 	bl	8000d24 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e05c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x416>
 8002bec:	e054      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f896 	bl	8000d24 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe f892 	bl	8000d24 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e045      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x444>
 8002c1a:	e03d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e038      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d028      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fd ffc4 	bl	8000d24 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fd ffc0 	bl	8000d24 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f821 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490a      	ldr	r1, [pc, #40]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd ff24 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	080081dc 	.word	0x080081dc
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000004 	.word	0x20000004

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b094      	sub	sp, #80	@ 0x50
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8c:	4b79      	ldr	r3, [pc, #484]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	f200 80e1 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea6:	e0db      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eac:	e0db      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4b73      	ldr	r3, [pc, #460]	@ (800307c <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb2:	e0d8      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ebc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d063      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	f04f 0000 	mov.w	r0, #0
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	0159      	lsls	r1, r3, #5
 8002ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef8:	0150      	lsls	r0, r2, #5
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4621      	mov	r1, r4
 8002f00:	1a51      	subs	r1, r2, r1
 8002f02:	6139      	str	r1, [r7, #16]
 8002f04:	4629      	mov	r1, r5
 8002f06:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f18:	4659      	mov	r1, fp
 8002f1a:	018b      	lsls	r3, r1, #6
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f22:	4651      	mov	r1, sl
 8002f24:	018a      	lsls	r2, r1, #6
 8002f26:	4651      	mov	r1, sl
 8002f28:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f46:	4690      	mov	r8, r2
 8002f48:	4699      	mov	r9, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	eb18 0303 	adds.w	r3, r8, r3
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	462b      	mov	r3, r5
 8002f54:	eb49 0303 	adc.w	r3, r9, r3
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f66:	4629      	mov	r1, r5
 8002f68:	024b      	lsls	r3, r1, #9
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f70:	4621      	mov	r1, r4
 8002f72:	024a      	lsls	r2, r1, #9
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f84:	f7fd f97c 	bl	8000280 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f90:	e058      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f92:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	0159      	lsls	r1, r3, #5
 8002fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbe:	0150      	lsls	r0, r2, #5
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	00eb      	lsls	r3, r5, #3
 8002ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffa:	00e2      	lsls	r2, r4, #3
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	461d      	mov	r5, r3
 8003000:	4643      	mov	r3, r8
 8003002:	18e3      	adds	r3, r4, r3
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	464b      	mov	r3, r9
 8003008:	eb45 0303 	adc.w	r3, r5, r3
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301a:	4629      	mov	r1, r5
 800301c:	028b      	lsls	r3, r1, #10
 800301e:	4621      	mov	r1, r4
 8003020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003024:	4621      	mov	r1, r4
 8003026:	028a      	lsls	r2, r1, #10
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302e:	2200      	movs	r2, #0
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	61fa      	str	r2, [r7, #28]
 8003034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003038:	f7fd f922 	bl	8000280 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003054:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x204>)
 8003062:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003068:	4618      	mov	r0, r3
 800306a:	3750      	adds	r7, #80	@ 0x50
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	080081ec 	.word	0x080081ec

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	080081ec 	.word	0x080081ec

080030e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07b      	b.n	80031f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800310a:	d009      	beq.n	8003120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
 8003112:	e005      	b.n	8003120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fbfa 	bl	8000934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	ea42 0103 	orr.w	r1, r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0104 	and.w	r1, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	f003 0210 	and.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e042      	b.n	8003292 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fd fbef 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2224      	movs	r2, #36	@ 0x24
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800323c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f82c 	bl	800329c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003252:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003262:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003272:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b0c0      	sub	sp, #256	@ 0x100
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b8:	68d9      	ldr	r1, [r3, #12]
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	ea40 0301 	orr.w	r3, r0, r1
 80032c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	431a      	orrs	r2, r3
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032f4:	f021 010c 	bic.w	r1, r1, #12
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003302:	430b      	orrs	r3, r1
 8003304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003316:	6999      	ldr	r1, [r3, #24]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	ea40 0301 	orr.w	r3, r0, r1
 8003322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b8f      	ldr	r3, [pc, #572]	@ (8003568 <UART_SetConfig+0x2cc>)
 800332c:	429a      	cmp	r2, r3
 800332e:	d005      	beq.n	800333c <UART_SetConfig+0xa0>
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b8d      	ldr	r3, [pc, #564]	@ (800356c <UART_SetConfig+0x2d0>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d104      	bne.n	8003346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800333c:	f7ff fec0 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8003340:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003344:	e003      	b.n	800334e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003346:	f7ff fea7 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 800334a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003358:	f040 810c 	bne.w	8003574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800335c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003366:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800336a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800336e:	4622      	mov	r2, r4
 8003370:	462b      	mov	r3, r5
 8003372:	1891      	adds	r1, r2, r2
 8003374:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003376:	415b      	adcs	r3, r3
 8003378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800337a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800337e:	4621      	mov	r1, r4
 8003380:	eb12 0801 	adds.w	r8, r2, r1
 8003384:	4629      	mov	r1, r5
 8003386:	eb43 0901 	adc.w	r9, r3, r1
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800339e:	4690      	mov	r8, r2
 80033a0:	4699      	mov	r9, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	eb18 0303 	adds.w	r3, r8, r3
 80033a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033ac:	462b      	mov	r3, r5
 80033ae:	eb49 0303 	adc.w	r3, r9, r3
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033ca:	460b      	mov	r3, r1
 80033cc:	18db      	adds	r3, r3, r3
 80033ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80033d0:	4613      	mov	r3, r2
 80033d2:	eb42 0303 	adc.w	r3, r2, r3
 80033d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80033d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033e0:	f7fc ff4e 	bl	8000280 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4b61      	ldr	r3, [pc, #388]	@ (8003570 <UART_SetConfig+0x2d4>)
 80033ea:	fba3 2302 	umull	r2, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	011c      	lsls	r4, r3, #4
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	1891      	adds	r1, r2, r2
 800340a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800340c:	415b      	adcs	r3, r3
 800340e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003414:	4641      	mov	r1, r8
 8003416:	eb12 0a01 	adds.w	sl, r2, r1
 800341a:	4649      	mov	r1, r9
 800341c:	eb43 0b01 	adc.w	fp, r3, r1
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800342c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003434:	4692      	mov	sl, r2
 8003436:	469b      	mov	fp, r3
 8003438:	4643      	mov	r3, r8
 800343a:	eb1a 0303 	adds.w	r3, sl, r3
 800343e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003442:	464b      	mov	r3, r9
 8003444:	eb4b 0303 	adc.w	r3, fp, r3
 8003448:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003458:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800345c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003460:	460b      	mov	r3, r1
 8003462:	18db      	adds	r3, r3, r3
 8003464:	643b      	str	r3, [r7, #64]	@ 0x40
 8003466:	4613      	mov	r3, r2
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	647b      	str	r3, [r7, #68]	@ 0x44
 800346e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003476:	f7fc ff03 	bl	8000280 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4611      	mov	r1, r2
 8003480:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <UART_SetConfig+0x2d4>)
 8003482:	fba3 2301 	umull	r2, r3, r3, r1
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2264      	movs	r2, #100	@ 0x64
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	1acb      	subs	r3, r1, r3
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003496:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <UART_SetConfig+0x2d4>)
 8003498:	fba3 2302 	umull	r2, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034a4:	441c      	add	r4, r3
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034c0:	415b      	adcs	r3, r3
 80034c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034c8:	4641      	mov	r1, r8
 80034ca:	1851      	adds	r1, r2, r1
 80034cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80034ce:	4649      	mov	r1, r9
 80034d0:	414b      	adcs	r3, r1
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034e0:	4659      	mov	r1, fp
 80034e2:	00cb      	lsls	r3, r1, #3
 80034e4:	4651      	mov	r1, sl
 80034e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ea:	4651      	mov	r1, sl
 80034ec:	00ca      	lsls	r2, r1, #3
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	4642      	mov	r2, r8
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003514:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800351c:	460b      	mov	r3, r1
 800351e:	18db      	adds	r3, r3, r3
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003522:	4613      	mov	r3, r2
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800352a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800352e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003532:	f7fc fea5 	bl	8000280 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <UART_SetConfig+0x2d4>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	@ 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3332      	adds	r3, #50	@ 0x32
 800354e:	4a08      	ldr	r2, [pc, #32]	@ (8003570 <UART_SetConfig+0x2d4>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 0207 	and.w	r2, r3, #7
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4422      	add	r2, r4
 8003562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003564:	e106      	b.n	8003774 <UART_SetConfig+0x4d8>
 8003566:	bf00      	nop
 8003568:	40011000 	.word	0x40011000
 800356c:	40011400 	.word	0x40011400
 8003570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003578:	2200      	movs	r2, #0
 800357a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800357e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003586:	4642      	mov	r2, r8
 8003588:	464b      	mov	r3, r9
 800358a:	1891      	adds	r1, r2, r2
 800358c:	6239      	str	r1, [r7, #32]
 800358e:	415b      	adcs	r3, r3
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
 8003592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003596:	4641      	mov	r1, r8
 8003598:	1854      	adds	r4, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0501 	adc.w	r5, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	00eb      	lsls	r3, r5, #3
 80035aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ae:	00e2      	lsls	r2, r4, #3
 80035b0:	4614      	mov	r4, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4643      	mov	r3, r8
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035bc:	464b      	mov	r3, r9
 80035be:	eb45 0303 	adc.w	r3, r5, r3
 80035c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035e2:	4629      	mov	r1, r5
 80035e4:	008b      	lsls	r3, r1, #2
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ec:	4621      	mov	r1, r4
 80035ee:	008a      	lsls	r2, r1, #2
 80035f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035f4:	f7fc fe44 	bl	8000280 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4b60      	ldr	r3, [pc, #384]	@ (8003780 <UART_SetConfig+0x4e4>)
 80035fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	011c      	lsls	r4, r3, #4
 8003606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800360a:	2200      	movs	r2, #0
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003610:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	1891      	adds	r1, r2, r2
 800361e:	61b9      	str	r1, [r7, #24]
 8003620:	415b      	adcs	r3, r3
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003628:	4641      	mov	r1, r8
 800362a:	1851      	adds	r1, r2, r1
 800362c:	6139      	str	r1, [r7, #16]
 800362e:	4649      	mov	r1, r9
 8003630:	414b      	adcs	r3, r1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003640:	4659      	mov	r1, fp
 8003642:	00cb      	lsls	r3, r1, #3
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364a:	4651      	mov	r1, sl
 800364c:	00ca      	lsls	r2, r1, #3
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4603      	mov	r3, r0
 8003654:	4642      	mov	r2, r8
 8003656:	189b      	adds	r3, r3, r2
 8003658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800365c:	464b      	mov	r3, r9
 800365e:	460a      	mov	r2, r1
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003672:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003680:	4649      	mov	r1, r9
 8003682:	008b      	lsls	r3, r1, #2
 8003684:	4641      	mov	r1, r8
 8003686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368a:	4641      	mov	r1, r8
 800368c:	008a      	lsls	r2, r1, #2
 800368e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003692:	f7fc fdf5 	bl	8000280 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4611      	mov	r1, r2
 800369c:	4b38      	ldr	r3, [pc, #224]	@ (8003780 <UART_SetConfig+0x4e4>)
 800369e:	fba3 2301 	umull	r2, r3, r3, r1
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2264      	movs	r2, #100	@ 0x64
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	1acb      	subs	r3, r1, r3
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	3332      	adds	r3, #50	@ 0x32
 80036b0:	4a33      	ldr	r2, [pc, #204]	@ (8003780 <UART_SetConfig+0x4e4>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036bc:	441c      	add	r4, r3
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80036c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80036c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	415b      	adcs	r3, r3
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036dc:	4641      	mov	r1, r8
 80036de:	1851      	adds	r1, r2, r1
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	4649      	mov	r1, r9
 80036e4:	414b      	adcs	r3, r1
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036f4:	4659      	mov	r1, fp
 80036f6:	00cb      	lsls	r3, r1, #3
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fe:	4651      	mov	r1, sl
 8003700:	00ca      	lsls	r2, r1, #3
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	4603      	mov	r3, r0
 8003708:	4642      	mov	r2, r8
 800370a:	189b      	adds	r3, r3, r2
 800370c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800370e:	464b      	mov	r3, r9
 8003710:	460a      	mov	r2, r1
 8003712:	eb42 0303 	adc.w	r3, r2, r3
 8003716:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	663b      	str	r3, [r7, #96]	@ 0x60
 8003722:	667a      	str	r2, [r7, #100]	@ 0x64
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003730:	4649      	mov	r1, r9
 8003732:	008b      	lsls	r3, r1, #2
 8003734:	4641      	mov	r1, r8
 8003736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800373a:	4641      	mov	r1, r8
 800373c:	008a      	lsls	r2, r1, #2
 800373e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003742:	f7fc fd9d 	bl	8000280 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <UART_SetConfig+0x4e4>)
 800374c:	fba3 1302 	umull	r1, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	2164      	movs	r1, #100	@ 0x64
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	3332      	adds	r3, #50	@ 0x32
 800375e:	4a08      	ldr	r2, [pc, #32]	@ (8003780 <UART_SetConfig+0x4e4>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4422      	add	r2, r4
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800377a:	46bd      	mov	sp, r7
 800377c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003780:	51eb851f 	.word	0x51eb851f

08003784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003784:	b084      	sub	sp, #16
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	f107 001c 	add.w	r0, r7, #28
 8003792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003796:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800379a:	2b01      	cmp	r3, #1
 800379c:	d123      	bne.n	80037e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80037b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fae8 	bl	8004db0 <USB_CoreReset>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e01b      	b.n	800381e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f001 fadc 	bl	8004db0 <USB_CoreReset>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003810:	e005      	b.n	800381e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800381e:	7fbb      	ldrb	r3, [r7, #30]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10b      	bne.n	800383c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f043 0206 	orr.w	r2, r3, #6
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003848:	b004      	add	sp, #16
 800384a:	4770      	bx	lr

0800384c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d165      	bne.n	800392c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a41      	ldr	r2, [pc, #260]	@ (8003968 <USB_SetTurnaroundTime+0x11c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d906      	bls.n	8003876 <USB_SetTurnaroundTime+0x2a>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a40      	ldr	r2, [pc, #256]	@ (800396c <USB_SetTurnaroundTime+0x120>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d202      	bcs.n	8003876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003870:	230f      	movs	r3, #15
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e062      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4a3c      	ldr	r2, [pc, #240]	@ (800396c <USB_SetTurnaroundTime+0x120>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d306      	bcc.n	800388c <USB_SetTurnaroundTime+0x40>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <USB_SetTurnaroundTime+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d202      	bcs.n	800388c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003886:	230e      	movs	r3, #14
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e057      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a38      	ldr	r2, [pc, #224]	@ (8003970 <USB_SetTurnaroundTime+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d306      	bcc.n	80038a2 <USB_SetTurnaroundTime+0x56>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a37      	ldr	r2, [pc, #220]	@ (8003974 <USB_SetTurnaroundTime+0x128>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d202      	bcs.n	80038a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800389c:	230d      	movs	r3, #13
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e04c      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a33      	ldr	r2, [pc, #204]	@ (8003974 <USB_SetTurnaroundTime+0x128>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d306      	bcc.n	80038b8 <USB_SetTurnaroundTime+0x6c>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a32      	ldr	r2, [pc, #200]	@ (8003978 <USB_SetTurnaroundTime+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038b2:	230c      	movs	r3, #12
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e041      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003978 <USB_SetTurnaroundTime+0x12c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d906      	bls.n	80038ce <USB_SetTurnaroundTime+0x82>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a2e      	ldr	r2, [pc, #184]	@ (800397c <USB_SetTurnaroundTime+0x130>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d802      	bhi.n	80038ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038c8:	230b      	movs	r3, #11
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e036      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <USB_SetTurnaroundTime+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d906      	bls.n	80038e4 <USB_SetTurnaroundTime+0x98>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <USB_SetTurnaroundTime+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d802      	bhi.n	80038e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038de:	230a      	movs	r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e02b      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <USB_SetTurnaroundTime+0x134>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d906      	bls.n	80038fa <USB_SetTurnaroundTime+0xae>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <USB_SetTurnaroundTime+0x138>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d202      	bcs.n	80038fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038f4:	2309      	movs	r3, #9
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e020      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a21      	ldr	r2, [pc, #132]	@ (8003984 <USB_SetTurnaroundTime+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d306      	bcc.n	8003910 <USB_SetTurnaroundTime+0xc4>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <USB_SetTurnaroundTime+0x13c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800390a:	2308      	movs	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e015      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <USB_SetTurnaroundTime+0x13c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d906      	bls.n	8003926 <USB_SetTurnaroundTime+0xda>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <USB_SetTurnaroundTime+0x140>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d202      	bcs.n	8003926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003920:	2307      	movs	r3, #7
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003926:	2306      	movs	r3, #6
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e007      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003932:	2309      	movs	r3, #9
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e001      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003938:	2309      	movs	r3, #9
 800393a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	00d8acbf 	.word	0x00d8acbf
 800396c:	00e4e1c0 	.word	0x00e4e1c0
 8003970:	00f42400 	.word	0x00f42400
 8003974:	01067380 	.word	0x01067380
 8003978:	011a499f 	.word	0x011a499f
 800397c:	01312cff 	.word	0x01312cff
 8003980:	014ca43f 	.word	0x014ca43f
 8003984:	016e3600 	.word	0x016e3600
 8003988:	01a6ab1f 	.word	0x01a6ab1f
 800398c:	01e84800 	.word	0x01e84800

08003990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d115      	bne.n	8003a22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a02:	200a      	movs	r0, #10
 8003a04:	f7fd f99a 	bl	8000d3c <HAL_Delay>
      ms += 10U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	330a      	adds	r3, #10
 8003a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 f93f 	bl	8004c92 <USB_GetMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d01e      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a1e:	d9f0      	bls.n	8003a02 <USB_SetCurrentMode+0x2e>
 8003a20:	e01a      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d115      	bne.n	8003a54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a34:	200a      	movs	r0, #10
 8003a36:	f7fd f981 	bl	8000d3c <HAL_Delay>
      ms += 10U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	330a      	adds	r3, #10
 8003a3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 f926 	bl	8004c92 <USB_GetMode>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a50:	d9f0      	bls.n	8003a34 <USB_SetCurrentMode+0x60>
 8003a52:	e001      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e005      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a5c:	d101      	bne.n	8003a62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e009      	b.n	8003aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3340      	adds	r3, #64	@ 0x40
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0e      	cmp	r3, #14
 8003aa4:	d9f2      	bls.n	8003a8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11c      	bne.n	8003ae8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ade:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ae6:	e00b      	b.n	8003b00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10d      	bne.n	8003b30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f968 	bl	8003df4 <USB_SetDevSpeed>
 8003b24:	e008      	b.n	8003b38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b26:	2101      	movs	r1, #1
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f963 	bl	8003df4 <USB_SetDevSpeed>
 8003b2e:	e003      	b.n	8003b38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b30:	2103      	movs	r1, #3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f95e 	bl	8003df4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b38:	2110      	movs	r1, #16
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8fa 	bl	8003d34 <USB_FlushTxFifo>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f924 	bl	8003d98 <USB_FlushRxFifo>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b60:	461a      	mov	r2, r3
 8003b62:	2300      	movs	r3, #0
 8003b64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e043      	b.n	8003c0c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b9a:	d118      	bne.n	8003bce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e013      	b.n	8003be0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e008      	b.n	8003be0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c10:	461a      	mov	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d3b5      	bcc.n	8003b84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e043      	b.n	8003ca6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c34:	d118      	bne.n	8003c68 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e013      	b.n	8003c7a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e008      	b.n	8003c7a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	2300      	movs	r3, #0
 8003c78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003caa:	461a      	mov	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d3b5      	bcc.n	8003c1e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <USB_DevInit+0x2c4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f043 0208 	orr.w	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr
 8003d30:	803c3800 	.word	0x803c3800

08003d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d4e:	d901      	bls.n	8003d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e01b      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	daf2      	bge.n	8003d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d78:	d901      	bls.n	8003d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d0f0      	beq.n	8003d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003db0:	d901      	bls.n	8003db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e018      	b.n	8003de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	daf2      	bge.n	8003da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd4:	d901      	bls.n	8003dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e006      	b.n	8003de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d0f0      	beq.n	8003dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]
 8003e4a:	e00a      	b.n	8003e62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d002      	beq.n	8003e58 <USB_GetDevSpeed+0x32>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d102      	bne.n	8003e5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	75fb      	strb	r3, [r7, #23]
 8003e5c:	e001      	b.n	8003e62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e5e:	230f      	movs	r3, #15
 8003e60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d13a      	bne.n	8003f02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d155      	bne.n	8003f70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e036      	b.n	8003f70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	2101      	movs	r1, #1
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11a      	bne.n	8003f70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	791b      	ldrb	r3, [r3, #4]
 8003f54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d161      	bne.n	8004060 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fb2:	d11f      	bne.n	8003ff4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004014:	4013      	ands	r3, r2
 8004016:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	b29b      	uxth	r3, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004038:	4013      	ands	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0159      	lsls	r1, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	440b      	add	r3, r1
 8004052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004056:	4619      	mov	r1, r3
 8004058:	4b35      	ldr	r3, [pc, #212]	@ (8004130 <USB_DeactivateEndpoint+0x1b0>)
 800405a:	4013      	ands	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
 800405e:	e060      	b.n	8004122 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004076:	d11f      	bne.n	80040b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004096:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	43db      	mvns	r3, r3
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040d8:	4013      	ands	r3, r2
 80040da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	43db      	mvns	r3, r3
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040fc:	4013      	ands	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	440b      	add	r3, r1
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	4619      	mov	r1, r3
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <USB_DeactivateEndpoint+0x1b4>)
 800411e:	4013      	ands	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	ec337800 	.word	0xec337800
 8004134:	eff37800 	.word	0xeff37800

08004138 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 817f 	bne.w	8004458 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d132      	bne.n	80041c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004180:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c0:	0cdb      	lsrs	r3, r3, #19
 80041c2:	04db      	lsls	r3, r3, #19
 80041c4:	6113      	str	r3, [r2, #16]
 80041c6:	e097      	b.n	80042f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e2:	0cdb      	lsrs	r3, r3, #19
 80041e4:	04db      	lsls	r3, r3, #19
 80041e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004202:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004206:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800420a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11a      	bne.n	8004248 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004244:	6113      	str	r3, [r2, #16]
 8004246:	e044      	b.n	80042d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4413      	add	r3, r2
 8004252:	1e5a      	subs	r2, r3, #1
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	04d9      	lsls	r1, r3, #19
 8004270:	4ba4      	ldr	r3, [pc, #656]	@ (8004504 <USB_EPStartXfer+0x3cc>)
 8004272:	400b      	ands	r3, r1
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	0148      	lsls	r0, r1, #5
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	4401      	add	r1, r0
 800427c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	791b      	ldrb	r3, [r3, #4]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d122      	bne.n	80042d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80042aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	8afb      	ldrh	r3, [r7, #22]
 80042bc:	075b      	lsls	r3, r3, #29
 80042be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	0148      	lsls	r0, r1, #5
 80042c6:	69f9      	ldr	r1, [r7, #28]
 80042c8:	4401      	add	r1, r0
 80042ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	0148      	lsls	r0, r1, #5
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	4401      	add	r1, r0
 80042f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d14b      	bne.n	8004396 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	791b      	ldrb	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d128      	bne.n	8004374 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d110      	bne.n	8004354 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800434c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00f      	b.n	8004374 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004372:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800438e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e166      	b.n	8004664 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	791b      	ldrb	r3, [r3, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d015      	beq.n	80043ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 814e 	beq.w	8004664 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043e4:	4313      	orrs	r3, r2
 80043e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80043e8:	e13c      	b.n	8004664 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d110      	bne.n	800441c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004414:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00f      	b.n	800443c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68d9      	ldr	r1, [r3, #12]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	b298      	uxth	r0, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	4603      	mov	r3, r0
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9b9 	bl	80047c8 <USB_WritePacket>
 8004456:	e105      	b.n	8004664 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004472:	0cdb      	lsrs	r3, r3, #19
 8004474:	04db      	lsls	r3, r3, #19
 8004476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004492:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004496:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800449a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d132      	bne.n	8004508 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	0148      	lsls	r0, r1, #5
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	4401      	add	r1, r0
 80044d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044fe:	6113      	str	r3, [r2, #16]
 8004500:	e062      	b.n	80045c8 <USB_EPStartXfer+0x490>
 8004502:	bf00      	nop
 8004504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d123      	bne.n	8004558 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004526:	69b9      	ldr	r1, [r7, #24]
 8004528:	0148      	lsls	r0, r1, #5
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	4401      	add	r1, r0
 800452e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004554:	6113      	str	r3, [r2, #16]
 8004556:	e037      	b.n	80045c8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4413      	add	r3, r2
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	8afa      	ldrh	r2, [r7, #22]
 8004574:	fb03 f202 	mul.w	r2, r3, r2
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	04d9      	lsls	r1, r3, #19
 800458e:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <USB_EPStartXfer+0x538>)
 8004590:	400b      	ands	r3, r1
 8004592:	69b9      	ldr	r1, [r7, #24]
 8004594:	0148      	lsls	r0, r1, #5
 8004596:	69f9      	ldr	r1, [r7, #28]
 8004598:	4401      	add	r1, r0
 800459a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800459e:	4313      	orrs	r3, r2
 80045a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	69b9      	ldr	r1, [r7, #24]
 80045ba:	0148      	lsls	r0, r1, #5
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	4401      	add	r1, r0
 80045c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	68d9      	ldr	r1, [r3, #12]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	460a      	mov	r2, r1
 80045e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d128      	bne.n	8004644 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d110      	bne.n	8004624 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800461c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00f      	b.n	8004644 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800465e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	1ff80000 	.word	0x1ff80000

08004674 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d14a      	bne.n	8004728 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046aa:	f040 8086 	bne.w	80047ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004702:	4293      	cmp	r3, r2
 8004704:	d902      	bls.n	800470c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
          break;
 800470a:	e056      	b.n	80047ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004724:	d0e7      	beq.n	80046f6 <USB_EPStopXfer+0x82>
 8004726:	e048      	b.n	80047ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800473c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004740:	d13b      	bne.n	80047ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004760:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004764:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004796:	4293      	cmp	r3, r2
 8004798:	d902      	bls.n	80047a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
          break;
 800479e:	e00c      	b.n	80047ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b8:	d0e7      	beq.n	800478a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	460b      	mov	r3, r1
 80047d8:	71fb      	strb	r3, [r7, #7]
 80047da:	4613      	mov	r3, r2
 80047dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d123      	bne.n	8004836 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ee:	88bb      	ldrh	r3, [r7, #4]
 80047f0:	3303      	adds	r3, #3
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e018      	b.n	800482e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	031a      	lsls	r2, r3, #12
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004808:	461a      	mov	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3301      	adds	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	3301      	adds	r3, #1
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3e2      	bcc.n	80047fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3724      	adds	r7, #36	@ 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004844:	b480      	push	{r7}
 8004846:	b08b      	sub	sp, #44	@ 0x2c
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	b29b      	uxth	r3, r3
 8004860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
 800486e:	e014      	b.n	800489a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	601a      	str	r2, [r3, #0]
    pDest++;
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	3301      	adds	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	3301      	adds	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	3301      	adds	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	3301      	adds	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	3301      	adds	r3, #1
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d3e6      	bcc.n	8004870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048a2:	8bfb      	ldrh	r3, [r7, #30]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01e      	beq.n	80048e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b2:	461a      	mov	r2, r3
 80048b4:	f107 0310 	add.w	r3, r7, #16
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	701a      	strb	r2, [r3, #0]
      i++;
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	3301      	adds	r3, #1
 80048d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	3301      	adds	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	3b01      	subs	r3, #1
 80048de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048e0:	8bfb      	ldrh	r3, [r7, #30]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ea      	bne.n	80048bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	372c      	adds	r7, #44	@ 0x2c
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d12c      	bne.n	800496a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db12      	blt.n	8004948 <USB_EPSetStall+0x54>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00f      	beq.n	8004948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004942:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e02b      	b.n	80049c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db12      	blt.n	80049a2 <USB_EPSetStall+0xae>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800499c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d128      	bne.n	8004a3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d003      	beq.n	8004a1c <USB_EPClearStall+0x4c>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d138      	bne.n	8004a8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e027      	b.n	8004a8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d003      	beq.n	8004a6e <USB_EPClearStall+0x9e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	791b      	ldrb	r3, [r3, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d10f      	bne.n	8004a8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004abe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b16:	f023 0302 	bic.w	r3, r3, #2
 8004b1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b44:	f023 0303 	bic.w	r3, r3, #3
 8004b48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	b29b      	uxth	r3, r3
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c28:	68bb      	ldr	r3, [r7, #8]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	01db      	lsls	r3, r3, #7
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c84:	68bb      	ldr	r3, [r7, #8]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	333c      	adds	r3, #60	@ 0x3c
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <USB_EP0_OutStart+0xb8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d90a      	bls.n	8004d2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d28:	d101      	bne.n	8004d2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e037      	b.n	8004d9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d34:	461a      	mov	r2, r3
 8004d36:	2300      	movs	r3, #0
 8004d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5c:	f043 0318 	orr.w	r3, r3, #24
 8004d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10f      	bne.n	8004d9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	4f54300a 	.word	0x4f54300a

08004db0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dc8:	d901      	bls.n	8004dce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e022      	b.n	8004e14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	daf2      	bge.n	8004dbc <USB_CoreReset+0xc>

  count = 10U;
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004dda:	e002      	b.n	8004de2 <USB_CoreReset+0x32>
  {
    count--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f9      	bne.n	8004ddc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e00:	d901      	bls.n	8004e06 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e006      	b.n	8004e14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d0f0      	beq.n	8004df4 <USB_CoreReset+0x44>

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004e30:	f002 fcbc 	bl	80077ac <USBD_static_malloc>
 8004e34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d109      	bne.n	8004e50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	32b0      	adds	r2, #176	@ 0xb0
 8004e46:	2100      	movs	r1, #0
 8004e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e0d4      	b.n	8004ffa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004e54:	2100      	movs	r1, #0
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f002 fd0e 	bl	8007878 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	32b0      	adds	r2, #176	@ 0xb0
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	32b0      	adds	r2, #176	@ 0xb0
 8004e76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7c1b      	ldrb	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d138      	bne.n	8004efa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e88:	4b5e      	ldr	r3, [pc, #376]	@ (8005004 <USBD_CDC_Init+0x1e4>)
 8004e8a:	7819      	ldrb	r1, [r3, #0]
 8004e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e90:	2202      	movs	r2, #2
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f002 fb67 	bl	8007566 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e98:	4b5a      	ldr	r3, [pc, #360]	@ (8005004 <USBD_CDC_Init+0x1e4>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	f003 020f 	and.w	r2, r3, #15
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3323      	adds	r3, #35	@ 0x23
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004eb2:	4b55      	ldr	r3, [pc, #340]	@ (8005008 <USBD_CDC_Init+0x1e8>)
 8004eb4:	7819      	ldrb	r1, [r3, #0]
 8004eb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eba:	2202      	movs	r2, #2
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f002 fb52 	bl	8007566 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ec2:	4b51      	ldr	r3, [pc, #324]	@ (8005008 <USBD_CDC_Init+0x1e8>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	f003 020f 	and.w	r2, r3, #15
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ede:	4b4b      	ldr	r3, [pc, #300]	@ (800500c <USBD_CDC_Init+0x1ec>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f003 020f 	and.w	r2, r3, #15
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	331c      	adds	r3, #28
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e035      	b.n	8004f66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004efa:	4b42      	ldr	r3, [pc, #264]	@ (8005004 <USBD_CDC_Init+0x1e4>)
 8004efc:	7819      	ldrb	r1, [r3, #0]
 8004efe:	2340      	movs	r3, #64	@ 0x40
 8004f00:	2202      	movs	r2, #2
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f002 fb2f 	bl	8007566 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f08:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <USBD_CDC_Init+0x1e4>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3323      	adds	r3, #35	@ 0x23
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f22:	4b39      	ldr	r3, [pc, #228]	@ (8005008 <USBD_CDC_Init+0x1e8>)
 8004f24:	7819      	ldrb	r1, [r3, #0]
 8004f26:	2340      	movs	r3, #64	@ 0x40
 8004f28:	2202      	movs	r2, #2
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f002 fb1b 	bl	8007566 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f30:	4b35      	ldr	r3, [pc, #212]	@ (8005008 <USBD_CDC_Init+0x1e8>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 020f 	and.w	r2, r3, #15
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <USBD_CDC_Init+0x1ec>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	331c      	adds	r3, #28
 8004f62:	2210      	movs	r2, #16
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f66:	4b29      	ldr	r3, [pc, #164]	@ (800500c <USBD_CDC_Init+0x1ec>)
 8004f68:	7819      	ldrb	r1, [r3, #0]
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f002 faf9 	bl	8007566 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f74:	4b25      	ldr	r3, [pc, #148]	@ (800500c <USBD_CDC_Init+0x1ec>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3323      	adds	r3, #35	@ 0x23
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	33b0      	adds	r3, #176	@ 0xb0
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e018      	b.n	8004ffa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7c1b      	ldrb	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <USBD_CDC_Init+0x1e8>)
 8004fd2:	7819      	ldrb	r1, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f002 fbb0 	bl	8007744 <USBD_LL_PrepareReceive>
 8004fe4:	e008      	b.n	8004ff8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fe6:	4b08      	ldr	r3, [pc, #32]	@ (8005008 <USBD_CDC_Init+0x1e8>)
 8004fe8:	7819      	ldrb	r1, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ff0:	2340      	movs	r3, #64	@ 0x40
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f002 fba6 	bl	8007744 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000093 	.word	0x20000093
 8005008:	20000094 	.word	0x20000094
 800500c:	20000095 	.word	0x20000095

08005010 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800501c:	4b3a      	ldr	r3, [pc, #232]	@ (8005108 <USBD_CDC_DeInit+0xf8>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f002 fac5 	bl	80075b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005028:	4b37      	ldr	r3, [pc, #220]	@ (8005108 <USBD_CDC_DeInit+0xf8>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 020f 	and.w	r2, r3, #15
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	3323      	adds	r3, #35	@ 0x23
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005042:	4b32      	ldr	r3, [pc, #200]	@ (800510c <USBD_CDC_DeInit+0xfc>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f002 fab2 	bl	80075b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800504e:	4b2f      	ldr	r3, [pc, #188]	@ (800510c <USBD_CDC_DeInit+0xfc>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f003 020f 	and.w	r2, r3, #15
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800506a:	4b29      	ldr	r3, [pc, #164]	@ (8005110 <USBD_CDC_DeInit+0x100>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 fa9e 	bl	80075b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005076:	4b26      	ldr	r3, [pc, #152]	@ (8005110 <USBD_CDC_DeInit+0x100>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f003 020f 	and.w	r2, r3, #15
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3323      	adds	r3, #35	@ 0x23
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005090:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <USBD_CDC_DeInit+0x100>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	331c      	adds	r3, #28
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	32b0      	adds	r2, #176	@ 0xb0
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01f      	beq.n	80050fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	33b0      	adds	r3, #176	@ 0xb0
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	32b0      	adds	r2, #176	@ 0xb0
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	4618      	mov	r0, r3
 80050e0:	f002 fb72 	bl	80077c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	32b0      	adds	r2, #176	@ 0xb0
 80050ee:	2100      	movs	r1, #0
 80050f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000093 	.word	0x20000093
 800510c:	20000094 	.word	0x20000094
 8005110:	20000095 	.word	0x20000095

08005114 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	32b0      	adds	r2, #176	@ 0xb0
 8005128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	e0bf      	b.n	80052c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800514c:	2b00      	cmp	r3, #0
 800514e:	d050      	beq.n	80051f2 <USBD_CDC_Setup+0xde>
 8005150:	2b20      	cmp	r3, #32
 8005152:	f040 80af 	bne.w	80052b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	88db      	ldrh	r3, [r3, #6]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d03a      	beq.n	80051d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	b25b      	sxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	da1b      	bge.n	80051a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	33b0      	adds	r3, #176	@ 0xb0
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800517e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	88d2      	ldrh	r2, [r2, #6]
 8005184:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	88db      	ldrh	r3, [r3, #6]
 800518a:	2b07      	cmp	r3, #7
 800518c:	bf28      	it	cs
 800518e:	2307      	movcs	r3, #7
 8005190:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	89fa      	ldrh	r2, [r7, #14]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fda9 	bl	8006cf0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800519e:	e090      	b.n	80052c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	785a      	ldrb	r2, [r3, #1]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	88db      	ldrh	r3, [r3, #6]
 80051ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80051b0:	d803      	bhi.n	80051ba <USBD_CDC_Setup+0xa6>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	88db      	ldrh	r3, [r3, #6]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	e000      	b.n	80051bc <USBD_CDC_Setup+0xa8>
 80051ba:	2240      	movs	r2, #64	@ 0x40
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051c2:	6939      	ldr	r1, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80051ca:	461a      	mov	r2, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fdbe 	bl	8006d4e <USBD_CtlPrepareRx>
      break;
 80051d2:	e076      	b.n	80052c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	33b0      	adds	r3, #176	@ 0xb0
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	7850      	ldrb	r0, [r2, #1]
 80051ea:	2200      	movs	r2, #0
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4798      	blx	r3
      break;
 80051f0:	e067      	b.n	80052c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b0b      	cmp	r3, #11
 80051f8:	d851      	bhi.n	800529e <USBD_CDC_Setup+0x18a>
 80051fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <USBD_CDC_Setup+0xec>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005231 	.word	0x08005231
 8005204:	080052ad 	.word	0x080052ad
 8005208:	0800529f 	.word	0x0800529f
 800520c:	0800529f 	.word	0x0800529f
 8005210:	0800529f 	.word	0x0800529f
 8005214:	0800529f 	.word	0x0800529f
 8005218:	0800529f 	.word	0x0800529f
 800521c:	0800529f 	.word	0x0800529f
 8005220:	0800529f 	.word	0x0800529f
 8005224:	0800529f 	.word	0x0800529f
 8005228:	0800525b 	.word	0x0800525b
 800522c:	08005285 	.word	0x08005285
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b03      	cmp	r3, #3
 800523a:	d107      	bne.n	800524c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800523c:	f107 030a 	add.w	r3, r7, #10
 8005240:	2202      	movs	r2, #2
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 fd53 	bl	8006cf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800524a:	e032      	b.n	80052b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 fcd1 	bl	8006bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005254:	2303      	movs	r3, #3
 8005256:	75fb      	strb	r3, [r7, #23]
          break;
 8005258:	e02b      	b.n	80052b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d107      	bne.n	8005276 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005266:	f107 030d 	add.w	r3, r7, #13
 800526a:	2201      	movs	r2, #1
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fd3e 	bl	8006cf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005274:	e01d      	b.n	80052b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fcbc 	bl	8006bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800527e:	2303      	movs	r3, #3
 8005280:	75fb      	strb	r3, [r7, #23]
          break;
 8005282:	e016      	b.n	80052b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b03      	cmp	r3, #3
 800528e:	d00f      	beq.n	80052b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fcaf 	bl	8006bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005298:	2303      	movs	r3, #3
 800529a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800529c:	e008      	b.n	80052b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fca8 	bl	8006bf6 <USBD_CtlError>
          ret = USBD_FAIL;
 80052a6:	2303      	movs	r3, #3
 80052a8:	75fb      	strb	r3, [r7, #23]
          break;
 80052aa:	e002      	b.n	80052b2 <USBD_CDC_Setup+0x19e>
          break;
 80052ac:	bf00      	nop
 80052ae:	e008      	b.n	80052c2 <USBD_CDC_Setup+0x1ae>
          break;
 80052b0:	bf00      	nop
      }
      break;
 80052b2:	e006      	b.n	80052c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fc9d 	bl	8006bf6 <USBD_CtlError>
      ret = USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	75fb      	strb	r3, [r7, #23]
      break;
 80052c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80052de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32b0      	adds	r2, #176	@ 0xb0
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e065      	b.n	80053c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	32b0      	adds	r2, #176	@ 0xb0
 8005300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005304:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	3314      	adds	r3, #20
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02f      	beq.n	8005380 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3314      	adds	r3, #20
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 010f 	and.w	r1, r3, #15
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	460b      	mov	r3, r1
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4403      	add	r3, r0
 8005348:	331c      	adds	r3, #28
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005356:	2b00      	cmp	r3, #0
 8005358:	d112      	bne.n	8005380 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3314      	adds	r3, #20
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005372:	78f9      	ldrb	r1, [r7, #3]
 8005374:	2300      	movs	r3, #0
 8005376:	2200      	movs	r2, #0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f002 f9c2 	bl	8007702 <USBD_LL_Transmit>
 800537e:	e01f      	b.n	80053c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	33b0      	adds	r3, #176	@ 0xb0
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d010      	beq.n	80053c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	33b0      	adds	r3, #176	@ 0xb0
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	32b0      	adds	r2, #176	@ 0xb0
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	32b0      	adds	r2, #176	@ 0xb0
 80053f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e01a      	b.n	8005432 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 f9c0 	bl	8007786 <USBD_LL_GetRxDataSize>
 8005406:	4602      	mov	r2, r0
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	33b0      	adds	r3, #176	@ 0xb0
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800542c:	4611      	mov	r1, r2
 800542e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	32b0      	adds	r2, #176	@ 0xb0
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005458:	2303      	movs	r3, #3
 800545a:	e024      	b.n	80054a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	33b0      	adds	r3, #176	@ 0xb0
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d019      	beq.n	80054a4 <USBD_CDC_EP0_RxReady+0x6a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005476:	2bff      	cmp	r3, #255	@ 0xff
 8005478:	d014      	beq.n	80054a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	33b0      	adds	r3, #176	@ 0xb0
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005492:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800549a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	22ff      	movs	r2, #255	@ 0xff
 80054a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054b8:	2182      	movs	r1, #130	@ 0x82
 80054ba:	4818      	ldr	r0, [pc, #96]	@ (800551c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054bc:	f000 fd62 	bl	8005f84 <USBD_GetEpDesc>
 80054c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054c2:	2101      	movs	r1, #1
 80054c4:	4815      	ldr	r0, [pc, #84]	@ (800551c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054c6:	f000 fd5d 	bl	8005f84 <USBD_GetEpDesc>
 80054ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054cc:	2181      	movs	r1, #129	@ 0x81
 80054ce:	4813      	ldr	r0, [pc, #76]	@ (800551c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054d0:	f000 fd58 	bl	8005f84 <USBD_GetEpDesc>
 80054d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2210      	movs	r2, #16
 80054e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054f0:	711a      	strb	r2, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005504:	711a      	strb	r2, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2243      	movs	r2, #67	@ 0x43
 800550e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005510:	4b02      	ldr	r3, [pc, #8]	@ (800551c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000050 	.word	0x20000050

08005520 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005528:	2182      	movs	r1, #130	@ 0x82
 800552a:	4818      	ldr	r0, [pc, #96]	@ (800558c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800552c:	f000 fd2a 	bl	8005f84 <USBD_GetEpDesc>
 8005530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005532:	2101      	movs	r1, #1
 8005534:	4815      	ldr	r0, [pc, #84]	@ (800558c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005536:	f000 fd25 	bl	8005f84 <USBD_GetEpDesc>
 800553a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800553c:	2181      	movs	r1, #129	@ 0x81
 800553e:	4813      	ldr	r0, [pc, #76]	@ (800558c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005540:	f000 fd20 	bl	8005f84 <USBD_GetEpDesc>
 8005544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2210      	movs	r2, #16
 8005550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2200      	movs	r2, #0
 800555c:	711a      	strb	r2, [r3, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f042 0202 	orr.w	r2, r2, #2
 8005564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	711a      	strb	r2, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f042 0202 	orr.w	r2, r2, #2
 8005578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2243      	movs	r2, #67	@ 0x43
 800557e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005580:	4b02      	ldr	r3, [pc, #8]	@ (800558c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000050 	.word	0x20000050

08005590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005598:	2182      	movs	r1, #130	@ 0x82
 800559a:	4818      	ldr	r0, [pc, #96]	@ (80055fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800559c:	f000 fcf2 	bl	8005f84 <USBD_GetEpDesc>
 80055a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055a2:	2101      	movs	r1, #1
 80055a4:	4815      	ldr	r0, [pc, #84]	@ (80055fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055a6:	f000 fced 	bl	8005f84 <USBD_GetEpDesc>
 80055aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055ac:	2181      	movs	r1, #129	@ 0x81
 80055ae:	4813      	ldr	r0, [pc, #76]	@ (80055fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055b0:	f000 fce8 	bl	8005f84 <USBD_GetEpDesc>
 80055b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2210      	movs	r2, #16
 80055c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d006      	beq.n	80055d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055d0:	711a      	strb	r2, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055e4:	711a      	strb	r2, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2243      	movs	r2, #67	@ 0x43
 80055ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055f0:	4b02      	ldr	r3, [pc, #8]	@ (80055fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000050 	.word	0x20000050

08005600 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	220a      	movs	r2, #10
 800560c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800560e:	4b03      	ldr	r3, [pc, #12]	@ (800561c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	2000000c 	.word	0x2000000c

08005620 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005630:	2303      	movs	r3, #3
 8005632:	e009      	b.n	8005648 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	33b0      	adds	r3, #176	@ 0xb0
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	32b0      	adds	r2, #176	@ 0xb0
 800566a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005676:	2303      	movs	r3, #3
 8005678:	e008      	b.n	800568c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	32b0      	adds	r2, #176	@ 0xb0
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e004      	b.n	80056c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	32b0      	adds	r2, #176	@ 0xb0
 80056e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e025      	b.n	8005746 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11f      	bne.n	8005744 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2201      	movs	r2, #1
 8005708:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800570c:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <USBD_CDC_TransmitPacket+0x7c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 020f 	and.w	r2, r3, #15
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4403      	add	r3, r0
 8005726:	3314      	adds	r3, #20
 8005728:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800572a:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <USBD_CDC_TransmitPacket+0x7c>)
 800572c:	7819      	ldrb	r1, [r3, #0]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 ffe1 	bl	8007702 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000093 	.word	0x20000093

08005754 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	32b0      	adds	r2, #176	@ 0xb0
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	32b0      	adds	r2, #176	@ 0xb0
 8005776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800577e:	2303      	movs	r3, #3
 8005780:	e018      	b.n	80057b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7c1b      	ldrb	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800578a:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <USBD_CDC_ReceivePacket+0x68>)
 800578c:	7819      	ldrb	r1, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 ffd3 	bl	8007744 <USBD_LL_PrepareReceive>
 800579e:	e008      	b.n	80057b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057a0:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <USBD_CDC_ReceivePacket+0x68>)
 80057a2:	7819      	ldrb	r1, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057aa:	2340      	movs	r3, #64	@ 0x40
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 ffc9 	bl	8007744 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000094 	.word	0x20000094

080057c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e01f      	b.n	8005818 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	79fa      	ldrb	r2, [r7, #7]
 800580a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f001 fe43 	bl	8007498 <USBD_LL_Init>
 8005812:	4603      	mov	r3, r0
 8005814:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005834:	2303      	movs	r3, #3
 8005836:	e025      	b.n	8005884 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	32ae      	adds	r2, #174	@ 0xae
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00f      	beq.n	8005874 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	32ae      	adds	r2, #174	@ 0xae
 800585e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	f107 020e 	add.w	r2, r7, #14
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
 800586c:	4602      	mov	r2, r0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fe4b 	bl	8007530 <USBD_LL_Start>
 800589a:	4603      	mov	r3, r0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	4611      	mov	r1, r2
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4798      	blx	r3
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	4611      	mov	r1, r2
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005918:	2303      	movs	r3, #3
 800591a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f001 f922 	bl	8006b82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800594c:	461a      	mov	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b02      	cmp	r3, #2
 8005960:	d01a      	beq.n	8005998 <USBD_LL_SetupStage+0x72>
 8005962:	2b02      	cmp	r3, #2
 8005964:	d822      	bhi.n	80059ac <USBD_LL_SetupStage+0x86>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <USBD_LL_SetupStage+0x4a>
 800596a:	2b01      	cmp	r3, #1
 800596c:	d00a      	beq.n	8005984 <USBD_LL_SetupStage+0x5e>
 800596e:	e01d      	b.n	80059ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fb77 	bl	800606c <USBD_StdDevReq>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e020      	b.n	80059c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fbdf 	bl	8006150 <USBD_StdItfReq>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
      break;
 8005996:	e016      	b.n	80059c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fc41 	bl	8006228 <USBD_StdEPReq>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73fb      	strb	r3, [r7, #15]
      break;
 80059aa:	e00c      	b.n	80059c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80059b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 fe18 	bl	80075f0 <USBD_LL_StallEP>
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
      break;
 80059c4:	bf00      	nop
  }

  return ret;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	460b      	mov	r3, r1
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80059e2:	7afb      	ldrb	r3, [r7, #11]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d177      	bne.n	8005ad8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80059ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	f040 80a1 	bne.w	8005b3e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	8992      	ldrh	r2, [r2, #12]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d91c      	bls.n	8005a42 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	8992      	ldrh	r2, [r2, #12]
 8005a10:	1a9a      	subs	r2, r3, r2
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	8992      	ldrh	r2, [r2, #12]
 8005a1e:	441a      	add	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6919      	ldr	r1, [r3, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	899b      	ldrh	r3, [r3, #12]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bf38      	it	cc
 8005a36:	4613      	movcc	r3, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f001 f9a8 	bl	8006d90 <USBD_CtlContinueRx>
 8005a40:	e07d      	b.n	8005b3e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d014      	beq.n	8005a7a <USBD_LL_DataOutStage+0xaa>
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d81d      	bhi.n	8005a90 <USBD_LL_DataOutStage+0xc0>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <USBD_LL_DataOutStage+0x8e>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d003      	beq.n	8005a64 <USBD_LL_DataOutStage+0x94>
 8005a5c:	e018      	b.n	8005a90 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75bb      	strb	r3, [r7, #22]
            break;
 8005a62:	e018      	b.n	8005a96 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fa6e 	bl	8005f50 <USBD_CoreFindIF>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75bb      	strb	r3, [r7, #22]
            break;
 8005a78:	e00d      	b.n	8005a96 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fa70 	bl	8005f6a <USBD_CoreFindEP>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75bb      	strb	r3, [r7, #22]
            break;
 8005a8e:	e002      	b.n	8005a96 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	75bb      	strb	r3, [r7, #22]
            break;
 8005a94:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a96:	7dbb      	ldrb	r3, [r7, #22]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d119      	bne.n	8005ad0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d113      	bne.n	8005ad0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005aa8:	7dba      	ldrb	r2, [r7, #22]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	32ae      	adds	r2, #174	@ 0xae
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005ab8:	7dba      	ldrb	r2, [r7, #22]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ac0:	7dba      	ldrb	r2, [r7, #22]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	32ae      	adds	r2, #174	@ 0xae
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 f96e 	bl	8006db2 <USBD_CtlSendStatus>
 8005ad6:	e032      	b.n	8005b3e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
 8005ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fa41 	bl	8005f6a <USBD_CoreFindEP>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aec:	7dbb      	ldrb	r3, [r7, #22]
 8005aee:	2bff      	cmp	r3, #255	@ 0xff
 8005af0:	d025      	beq.n	8005b3e <USBD_LL_DataOutStage+0x16e>
 8005af2:	7dbb      	ldrb	r3, [r7, #22]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d122      	bne.n	8005b3e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d117      	bne.n	8005b34 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b04:	7dba      	ldrb	r2, [r7, #22]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	32ae      	adds	r2, #174	@ 0xae
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00f      	beq.n	8005b34 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005b14:	7dba      	ldrb	r2, [r7, #22]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b1c:	7dba      	ldrb	r2, [r7, #22]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	32ae      	adds	r2, #174	@ 0xae
 8005b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	7afa      	ldrb	r2, [r7, #11]
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	4798      	blx	r3
 8005b30:	4603      	mov	r3, r0
 8005b32:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	e000      	b.n	8005b40 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	460b      	mov	r3, r1
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d178      	bne.n	8005c4e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d163      	bne.n	8005c34 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	8992      	ldrh	r2, [r2, #12]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d91c      	bls.n	8005bb2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	8992      	ldrh	r2, [r2, #12]
 8005b80:	1a9a      	subs	r2, r3, r2
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	8992      	ldrh	r2, [r2, #12]
 8005b8e:	441a      	add	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6919      	ldr	r1, [r3, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f001 f8c4 	bl	8006d2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2100      	movs	r1, #0
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f001 fdca 	bl	8007744 <USBD_LL_PrepareReceive>
 8005bb0:	e040      	b.n	8005c34 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	899b      	ldrh	r3, [r3, #12]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d11c      	bne.n	8005bfa <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d316      	bcc.n	8005bfa <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d20f      	bcs.n	8005bfa <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2100      	movs	r1, #0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f001 f8a4 	bl	8006d2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bec:	2300      	movs	r3, #0
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f001 fda6 	bl	8007744 <USBD_LL_PrepareReceive>
 8005bf8:	e01c      	b.n	8005c34 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d10f      	bne.n	8005c26 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c26:	2180      	movs	r1, #128	@ 0x80
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f001 fce1 	bl	80075f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f001 f8d2 	bl	8006dd8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d03a      	beq.n	8005cb4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fe30 	bl	80058a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005c4c:	e032      	b.n	8005cb4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c4e:	7afb      	ldrb	r3, [r7, #11]
 8005c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4619      	mov	r1, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f986 	bl	8005f6a <USBD_CoreFindEP>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2bff      	cmp	r3, #255	@ 0xff
 8005c66:	d025      	beq.n	8005cb4 <USBD_LL_DataInStage+0x16c>
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d122      	bne.n	8005cb4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d11c      	bne.n	8005cb4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c7a:	7dfa      	ldrb	r2, [r7, #23]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	32ae      	adds	r2, #174	@ 0xae
 8005c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d014      	beq.n	8005cb4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005c8a:	7dfa      	ldrb	r2, [r7, #23]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c92:	7dfa      	ldrb	r2, [r7, #23]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	32ae      	adds	r2, #174	@ 0xae
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	7afa      	ldrb	r2, [r7, #11]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	4798      	blx	r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005caa:	7dbb      	ldrb	r3, [r7, #22]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005cb0:	7dbb      	ldrb	r3, [r7, #22]
 8005cb2:	e000      	b.n	8005cb6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00e      	beq.n	8005d24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6852      	ldr	r2, [r2, #4]
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	4611      	mov	r1, r2
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d24:	2340      	movs	r3, #64	@ 0x40
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fc1b 	bl	8007566 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2240      	movs	r2, #64	@ 0x40
 8005d3c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d40:	2340      	movs	r3, #64	@ 0x40
 8005d42:	2200      	movs	r2, #0
 8005d44:	2180      	movs	r1, #128	@ 0x80
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fc0d 	bl	8007566 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2240      	movs	r2, #64	@ 0x40
 8005d58:	841a      	strh	r2, [r3, #32]

  return ret;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d006      	beq.n	8005da6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2204      	movs	r2, #4
 8005daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d106      	bne.n	8005dde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d110      	bne.n	8005e22 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	32ae      	adds	r2, #174	@ 0xae
 8005e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e01c      	b.n	8005e88 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d115      	bne.n	8005e86 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	32ae      	adds	r2, #174	@ 0xae
 8005e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	32ae      	adds	r2, #174	@ 0xae
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	4611      	mov	r1, r2
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32ae      	adds	r2, #174	@ 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e01c      	b.n	8005eec <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d115      	bne.n	8005eea <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	32ae      	adds	r2, #174	@ 0xae
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	32ae      	adds	r2, #174	@ 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6852      	ldr	r2, [r2, #4]
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	4611      	mov	r1, r2
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f42:	2303      	movs	r3, #3
 8005f44:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	885b      	ldrh	r3, [r3, #2]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d91f      	bls.n	8005fea <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fb0:	e013      	b.n	8005fda <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fb2:	f107 030a 	add.w	r3, r7, #10
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6978      	ldr	r0, [r7, #20]
 8005fba:	f000 f81b 	bl	8005ff4 <USBD_GetNextDesc>
 8005fbe:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d108      	bne.n	8005fda <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	789b      	ldrb	r3, [r3, #2]
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d008      	beq.n	8005fe8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	885b      	ldrh	r3, [r3, #2]
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	897b      	ldrh	r3, [r7, #10]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d8e5      	bhi.n	8005fb2 <USBD_GetEpDesc+0x2e>
 8005fe6:	e000      	b.n	8005fea <USBD_GetEpDesc+0x66>
          break;
 8005fe8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fea:	693b      	ldr	r3, [r7, #16]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	4413      	add	r3, r2
 800600c:	b29a      	uxth	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4413      	add	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800604a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	b21a      	sxth	r2, r3
 8006052:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006056:	4313      	orrs	r3, r2
 8006058:	b21b      	sxth	r3, r3
 800605a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800605c:	89fb      	ldrh	r3, [r7, #14]
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006082:	2b40      	cmp	r3, #64	@ 0x40
 8006084:	d005      	beq.n	8006092 <USBD_StdDevReq+0x26>
 8006086:	2b40      	cmp	r3, #64	@ 0x40
 8006088:	d857      	bhi.n	800613a <USBD_StdDevReq+0xce>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00f      	beq.n	80060ae <USBD_StdDevReq+0x42>
 800608e:	2b20      	cmp	r3, #32
 8006090:	d153      	bne.n	800613a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	32ae      	adds	r2, #174	@ 0xae
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
      break;
 80060ac:	e04a      	b.n	8006144 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	d83b      	bhi.n	800612e <USBD_StdDevReq+0xc2>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <USBD_StdDevReq+0x50>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006111 	.word	0x08006111
 80060c0:	08006125 	.word	0x08006125
 80060c4:	0800612f 	.word	0x0800612f
 80060c8:	0800611b 	.word	0x0800611b
 80060cc:	0800612f 	.word	0x0800612f
 80060d0:	080060ef 	.word	0x080060ef
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	0800612f 	.word	0x0800612f
 80060dc:	08006107 	.word	0x08006107
 80060e0:	080060f9 	.word	0x080060f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa3e 	bl	8006568 <USBD_GetDescriptor>
          break;
 80060ec:	e024      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fba3 	bl	800683c <USBD_SetAddress>
          break;
 80060f6:	e01f      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fbe2 	bl	80068c4 <USBD_SetConfig>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]
          break;
 8006104:	e018      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fc85 	bl	8006a18 <USBD_GetConfig>
          break;
 800610e:	e013      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fcb6 	bl	8006a84 <USBD_GetStatus>
          break;
 8006118:	e00e      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fce5 	bl	8006aec <USBD_SetFeature>
          break;
 8006122:	e009      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fd09 	bl	8006b3e <USBD_ClrFeature>
          break;
 800612c:	e004      	b.n	8006138 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fd60 	bl	8006bf6 <USBD_CtlError>
          break;
 8006136:	bf00      	nop
      }
      break;
 8006138:	e004      	b.n	8006144 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fd5a 	bl	8006bf6 <USBD_CtlError>
      break;
 8006142:	bf00      	nop
  }

  return ret;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop

08006150 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006166:	2b40      	cmp	r3, #64	@ 0x40
 8006168:	d005      	beq.n	8006176 <USBD_StdItfReq+0x26>
 800616a:	2b40      	cmp	r3, #64	@ 0x40
 800616c:	d852      	bhi.n	8006214 <USBD_StdItfReq+0xc4>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <USBD_StdItfReq+0x26>
 8006172:	2b20      	cmp	r3, #32
 8006174:	d14e      	bne.n	8006214 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	2b02      	cmp	r3, #2
 8006182:	d840      	bhi.n	8006206 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	889b      	ldrh	r3, [r3, #4]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d836      	bhi.n	80061fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	889b      	ldrh	r3, [r3, #4]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff feda 	bl	8005f50 <USBD_CoreFindIF>
 800619c:	4603      	mov	r3, r0
 800619e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	2bff      	cmp	r3, #255	@ 0xff
 80061a4:	d01d      	beq.n	80061e2 <USBD_StdItfReq+0x92>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d11a      	bne.n	80061e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061ac:	7bba      	ldrb	r2, [r7, #14]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32ae      	adds	r2, #174	@ 0xae
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00f      	beq.n	80061dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061bc:	7bba      	ldrb	r2, [r7, #14]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061c4:	7bba      	ldrb	r2, [r7, #14]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32ae      	adds	r2, #174	@ 0xae
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061da:	e004      	b.n	80061e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061e0:	e001      	b.n	80061e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	88db      	ldrh	r3, [r3, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d110      	bne.n	8006210 <USBD_StdItfReq+0xc0>
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fddc 	bl	8006db2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061fa:	e009      	b.n	8006210 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fcf9 	bl	8006bf6 <USBD_CtlError>
          break;
 8006204:	e004      	b.n	8006210 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fcf4 	bl	8006bf6 <USBD_CtlError>
          break;
 800620e:	e000      	b.n	8006212 <USBD_StdItfReq+0xc2>
          break;
 8006210:	bf00      	nop
      }
      break;
 8006212:	e004      	b.n	800621e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fced 	bl	8006bf6 <USBD_CtlError>
      break;
 800621c:	bf00      	nop
  }

  return ret;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	889b      	ldrh	r3, [r3, #4]
 800623a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d007      	beq.n	8006258 <USBD_StdEPReq+0x30>
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	f200 8181 	bhi.w	8006550 <USBD_StdEPReq+0x328>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02a      	beq.n	80062a8 <USBD_StdEPReq+0x80>
 8006252:	2b20      	cmp	r3, #32
 8006254:	f040 817c 	bne.w	8006550 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe84 	bl	8005f6a <USBD_CoreFindEP>
 8006262:	4603      	mov	r3, r0
 8006264:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006266:	7b7b      	ldrb	r3, [r7, #13]
 8006268:	2bff      	cmp	r3, #255	@ 0xff
 800626a:	f000 8176 	beq.w	800655a <USBD_StdEPReq+0x332>
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 8172 	bne.w	800655a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006276:	7b7a      	ldrb	r2, [r7, #13]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800627e:	7b7a      	ldrb	r2, [r7, #13]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	32ae      	adds	r2, #174	@ 0xae
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8165 	beq.w	800655a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006290:	7b7a      	ldrb	r2, [r7, #13]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32ae      	adds	r2, #174	@ 0xae
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062a6:	e158      	b.n	800655a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d008      	beq.n	80062c2 <USBD_StdEPReq+0x9a>
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	f300 8147 	bgt.w	8006544 <USBD_StdEPReq+0x31c>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 809b 	beq.w	80063f2 <USBD_StdEPReq+0x1ca>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d03c      	beq.n	800633a <USBD_StdEPReq+0x112>
 80062c0:	e140      	b.n	8006544 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d002      	beq.n	80062d4 <USBD_StdEPReq+0xac>
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d016      	beq.n	8006300 <USBD_StdEPReq+0xd8>
 80062d2:	e02c      	b.n	800632e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <USBD_StdEPReq+0xce>
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	2b80      	cmp	r3, #128	@ 0x80
 80062de:	d00a      	beq.n	80062f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 f983 	bl	80075f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ea:	2180      	movs	r1, #128	@ 0x80
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f97f 	bl	80075f0 <USBD_LL_StallEP>
 80062f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062f4:	e020      	b.n	8006338 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc7c 	bl	8006bf6 <USBD_CtlError>
              break;
 80062fe:	e01b      	b.n	8006338 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10e      	bne.n	8006326 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <USBD_StdEPReq+0xfe>
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b80      	cmp	r3, #128	@ 0x80
 8006312:	d008      	beq.n	8006326 <USBD_StdEPReq+0xfe>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f965 	bl	80075f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fd43 	bl	8006db2 <USBD_CtlSendStatus>

              break;
 800632c:	e004      	b.n	8006338 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc60 	bl	8006bf6 <USBD_CtlError>
              break;
 8006336:	bf00      	nop
          }
          break;
 8006338:	e109      	b.n	800654e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d002      	beq.n	800634c <USBD_StdEPReq+0x124>
 8006346:	2b03      	cmp	r3, #3
 8006348:	d016      	beq.n	8006378 <USBD_StdEPReq+0x150>
 800634a:	e04b      	b.n	80063e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <USBD_StdEPReq+0x146>
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b80      	cmp	r3, #128	@ 0x80
 8006356:	d00a      	beq.n	800636e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f947 	bl	80075f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006362:	2180      	movs	r1, #128	@ 0x80
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f943 	bl	80075f0 <USBD_LL_StallEP>
 800636a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800636c:	e040      	b.n	80063f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fc40 	bl	8006bf6 <USBD_CtlError>
              break;
 8006376:	e03b      	b.n	80063f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	885b      	ldrh	r3, [r3, #2]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d136      	bne.n	80063ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f94d 	bl	800762e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fd0c 	bl	8006db2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fde3 	bl	8005f6a <USBD_CoreFindEP>
 80063a4:	4603      	mov	r3, r0
 80063a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063a8:	7b7b      	ldrb	r3, [r7, #13]
 80063aa:	2bff      	cmp	r3, #255	@ 0xff
 80063ac:	d01f      	beq.n	80063ee <USBD_StdEPReq+0x1c6>
 80063ae:	7b7b      	ldrb	r3, [r7, #13]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11c      	bne.n	80063ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063b4:	7b7a      	ldrb	r2, [r7, #13]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063bc:	7b7a      	ldrb	r2, [r7, #13]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32ae      	adds	r2, #174	@ 0xae
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063cc:	7b7a      	ldrb	r2, [r7, #13]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	32ae      	adds	r2, #174	@ 0xae
 80063d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063e2:	e004      	b.n	80063ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fc05 	bl	8006bf6 <USBD_CtlError>
              break;
 80063ec:	e000      	b.n	80063f0 <USBD_StdEPReq+0x1c8>
              break;
 80063ee:	bf00      	nop
          }
          break;
 80063f0:	e0ad      	b.n	800654e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d002      	beq.n	8006404 <USBD_StdEPReq+0x1dc>
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d033      	beq.n	800646a <USBD_StdEPReq+0x242>
 8006402:	e099      	b.n	8006538 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <USBD_StdEPReq+0x1f2>
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b80      	cmp	r3, #128	@ 0x80
 800640e:	d004      	beq.n	800641a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fbef 	bl	8006bf6 <USBD_CtlError>
                break;
 8006418:	e093      	b.n	8006542 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800641a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da0b      	bge.n	800643a <USBD_StdEPReq+0x212>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	3310      	adds	r3, #16
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	3304      	adds	r3, #4
 8006438:	e00b      	b.n	8006452 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	330e      	adds	r3, #14
 800645e:	2202      	movs	r2, #2
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fc44 	bl	8006cf0 <USBD_CtlSendData>
              break;
 8006468:	e06b      	b.n	8006542 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800646a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800646e:	2b00      	cmp	r3, #0
 8006470:	da11      	bge.n	8006496 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	f003 020f 	and.w	r2, r3, #15
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	3323      	adds	r3, #35	@ 0x23
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d117      	bne.n	80064bc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fbb1 	bl	8006bf6 <USBD_CtlError>
                  break;
 8006494:	e055      	b.n	8006542 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fb9e 	bl	8006bf6 <USBD_CtlError>
                  break;
 80064ba:	e042      	b.n	8006542 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da0b      	bge.n	80064dc <USBD_StdEPReq+0x2b4>
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	3310      	adds	r3, #16
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4413      	add	r3, r2
 80064d8:	3304      	adds	r3, #4
 80064da:	e00b      	b.n	80064f4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	3304      	adds	r3, #4
 80064f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <USBD_StdEPReq+0x2da>
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b80      	cmp	r3, #128	@ 0x80
 8006500:	d103      	bne.n	800650a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2200      	movs	r2, #0
 8006506:	739a      	strb	r2, [r3, #14]
 8006508:	e00e      	b.n	8006528 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 f8ac 	bl	800766c <USBD_LL_IsStallEP>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2201      	movs	r2, #1
 800651e:	739a      	strb	r2, [r3, #14]
 8006520:	e002      	b.n	8006528 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	330e      	adds	r3, #14
 800652c:	2202      	movs	r2, #2
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fbdd 	bl	8006cf0 <USBD_CtlSendData>
              break;
 8006536:	e004      	b.n	8006542 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fb5b 	bl	8006bf6 <USBD_CtlError>
              break;
 8006540:	bf00      	nop
          }
          break;
 8006542:	e004      	b.n	800654e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fb55 	bl	8006bf6 <USBD_CtlError>
          break;
 800654c:	bf00      	nop
      }
      break;
 800654e:	e005      	b.n	800655c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb4f 	bl	8006bf6 <USBD_CtlError>
      break;
 8006558:	e000      	b.n	800655c <USBD_StdEPReq+0x334>
      break;
 800655a:	bf00      	nop
  }

  return ret;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	2b06      	cmp	r3, #6
 800658a:	f200 8128 	bhi.w	80067de <USBD_GetDescriptor+0x276>
 800658e:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <USBD_GetDescriptor+0x2c>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065c9 	.word	0x080065c9
 800659c:	08006609 	.word	0x08006609
 80065a0:	080067df 	.word	0x080067df
 80065a4:	080067df 	.word	0x080067df
 80065a8:	0800677f 	.word	0x0800677f
 80065ac:	080067ab 	.word	0x080067ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	7c12      	ldrb	r2, [r2, #16]
 80065bc:	f107 0108 	add.w	r1, r7, #8
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	60f8      	str	r0, [r7, #12]
      break;
 80065c6:	e112      	b.n	80067ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	7c1b      	ldrb	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10d      	bne.n	80065ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	f107 0208 	add.w	r2, r7, #8
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
 80065e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	2202      	movs	r2, #2
 80065e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065ea:	e100      	b.n	80067ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	f107 0208 	add.w	r2, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	2202      	movs	r2, #2
 8006604:	701a      	strb	r2, [r3, #0]
      break;
 8006606:	e0f2      	b.n	80067ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b05      	cmp	r3, #5
 8006610:	f200 80ac 	bhi.w	800676c <USBD_GetDescriptor+0x204>
 8006614:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <USBD_GetDescriptor+0xb4>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006635 	.word	0x08006635
 8006620:	08006669 	.word	0x08006669
 8006624:	0800669d 	.word	0x0800669d
 8006628:	080066d1 	.word	0x080066d1
 800662c:	08006705 	.word	0x08006705
 8006630:	08006739 	.word	0x08006739
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	7c12      	ldrb	r2, [r2, #16]
 800664c:	f107 0108 	add.w	r1, r7, #8
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006656:	e091      	b.n	800677c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 facb 	bl	8006bf6 <USBD_CtlError>
            err++;
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	3301      	adds	r3, #1
 8006664:	72fb      	strb	r3, [r7, #11]
          break;
 8006666:	e089      	b.n	800677c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	7c12      	ldrb	r2, [r2, #16]
 8006680:	f107 0108 	add.w	r1, r7, #8
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668a:	e077      	b.n	800677c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fab1 	bl	8006bf6 <USBD_CtlError>
            err++;
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	3301      	adds	r3, #1
 8006698:	72fb      	strb	r3, [r7, #11]
          break;
 800669a:	e06f      	b.n	800677c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	7c12      	ldrb	r2, [r2, #16]
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066be:	e05d      	b.n	800677c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa97 	bl	8006bf6 <USBD_CtlError>
            err++;
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	3301      	adds	r3, #1
 80066cc:	72fb      	strb	r3, [r7, #11]
          break;
 80066ce:	e055      	b.n	800677c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f2:	e043      	b.n	800677c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa7d 	bl	8006bf6 <USBD_CtlError>
            err++;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	3301      	adds	r3, #1
 8006700:	72fb      	strb	r3, [r7, #11]
          break;
 8006702:	e03b      	b.n	800677c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	7c12      	ldrb	r2, [r2, #16]
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006726:	e029      	b.n	800677c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa63 	bl	8006bf6 <USBD_CtlError>
            err++;
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	3301      	adds	r3, #1
 8006734:	72fb      	strb	r3, [r7, #11]
          break;
 8006736:	e021      	b.n	800677c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675a:	e00f      	b.n	800677c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa49 	bl	8006bf6 <USBD_CtlError>
            err++;
 8006764:	7afb      	ldrb	r3, [r7, #11]
 8006766:	3301      	adds	r3, #1
 8006768:	72fb      	strb	r3, [r7, #11]
          break;
 800676a:	e007      	b.n	800677c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa41 	bl	8006bf6 <USBD_CtlError>
          err++;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	3301      	adds	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800677a:	bf00      	nop
      }
      break;
 800677c:	e037      	b.n	80067ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	7c1b      	ldrb	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	f107 0208 	add.w	r2, r7, #8
 8006792:	4610      	mov	r0, r2
 8006794:	4798      	blx	r3
 8006796:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006798:	e029      	b.n	80067ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fa2a 	bl	8006bf6 <USBD_CtlError>
        err++;
 80067a2:	7afb      	ldrb	r3, [r7, #11]
 80067a4:	3301      	adds	r3, #1
 80067a6:	72fb      	strb	r3, [r7, #11]
      break;
 80067a8:	e021      	b.n	80067ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7c1b      	ldrb	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10d      	bne.n	80067ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ba:	f107 0208 	add.w	r2, r7, #8
 80067be:	4610      	mov	r0, r2
 80067c0:	4798      	blx	r3
 80067c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	2207      	movs	r2, #7
 80067ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067cc:	e00f      	b.n	80067ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fa10 	bl	8006bf6 <USBD_CtlError>
        err++;
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	3301      	adds	r3, #1
 80067da:	72fb      	strb	r3, [r7, #11]
      break;
 80067dc:	e007      	b.n	80067ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa08 	bl	8006bf6 <USBD_CtlError>
      err++;
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	3301      	adds	r3, #1
 80067ea:	72fb      	strb	r3, [r7, #11]
      break;
 80067ec:	bf00      	nop
  }

  if (err != 0U)
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d11e      	bne.n	8006832 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	88db      	ldrh	r3, [r3, #6]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d016      	beq.n	800682a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067fc:	893b      	ldrh	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00e      	beq.n	8006820 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	88da      	ldrh	r2, [r3, #6]
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	4293      	cmp	r3, r2
 800680a:	bf28      	it	cs
 800680c:	4613      	movcs	r3, r2
 800680e:	b29b      	uxth	r3, r3
 8006810:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	461a      	mov	r2, r3
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fa69 	bl	8006cf0 <USBD_CtlSendData>
 800681e:	e009      	b.n	8006834 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9e7 	bl	8006bf6 <USBD_CtlError>
 8006828:	e004      	b.n	8006834 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fac1 	bl	8006db2 <USBD_CtlSendStatus>
 8006830:	e000      	b.n	8006834 <USBD_GetDescriptor+0x2cc>
    return;
 8006832:	bf00      	nop
  }
}
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop

0800683c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	889b      	ldrh	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d131      	bne.n	80068b2 <USBD_SetAddress+0x76>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	88db      	ldrh	r3, [r3, #6]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d12d      	bne.n	80068b2 <USBD_SetAddress+0x76>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	2b7f      	cmp	r3, #127	@ 0x7f
 800685c:	d829      	bhi.n	80068b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006868:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b03      	cmp	r3, #3
 8006874:	d104      	bne.n	8006880 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f9bc 	bl	8006bf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687e:	e01d      	b.n	80068bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 ff19 	bl	80076c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa8d 	bl	8006db2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a6:	e009      	b.n	80068bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b0:	e004      	b.n	80068bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f99e 	bl	8006bf6 <USBD_CtlError>
  }
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	885b      	ldrh	r3, [r3, #2]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4b4e      	ldr	r3, [pc, #312]	@ (8006a14 <USBD_SetConfig+0x150>)
 80068da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006a14 <USBD_SetConfig+0x150>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d905      	bls.n	80068f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f985 	bl	8006bf6 <USBD_CtlError>
    return USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e08c      	b.n	8006a0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d002      	beq.n	8006902 <USBD_SetConfig+0x3e>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d029      	beq.n	8006954 <USBD_SetConfig+0x90>
 8006900:	e075      	b.n	80069ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006902:	4b44      	ldr	r3, [pc, #272]	@ (8006a14 <USBD_SetConfig+0x150>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800690a:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <USBD_SetConfig+0x150>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006914:	4b3f      	ldr	r3, [pc, #252]	@ (8006a14 <USBD_SetConfig+0x150>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fe ffcd 	bl	80058ba <USBD_SetClassConfig>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f962 	bl	8006bf6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800693a:	e065      	b.n	8006a08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa38 	bl	8006db2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2203      	movs	r2, #3
 8006946:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800694a:	e05d      	b.n	8006a08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa30 	bl	8006db2 <USBD_CtlSendStatus>
      break;
 8006952:	e059      	b.n	8006a08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006954:	4b2f      	ldr	r3, [pc, #188]	@ (8006a14 <USBD_SetConfig+0x150>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d112      	bne.n	8006982 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006964:	4b2b      	ldr	r3, [pc, #172]	@ (8006a14 <USBD_SetConfig+0x150>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800696e:	4b29      	ldr	r3, [pc, #164]	@ (8006a14 <USBD_SetConfig+0x150>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fe ffbc 	bl	80058f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa19 	bl	8006db2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006980:	e042      	b.n	8006a08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006982:	4b24      	ldr	r3, [pc, #144]	@ (8006a14 <USBD_SetConfig+0x150>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d02a      	beq.n	80069e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fe ffaa 	bl	80058f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800699e:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <USBD_SetConfig+0x150>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a14 <USBD_SetConfig+0x150>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe ff83 	bl	80058ba <USBD_SetClassConfig>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00f      	beq.n	80069de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f918 	bl	8006bf6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fe ff8f 	bl	80058f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80069dc:	e014      	b.n	8006a08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9e7 	bl	8006db2 <USBD_CtlSendStatus>
      break;
 80069e4:	e010      	b.n	8006a08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9e3 	bl	8006db2 <USBD_CtlSendStatus>
      break;
 80069ec:	e00c      	b.n	8006a08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f900 	bl	8006bf6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069f6:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <USBD_SetConfig+0x150>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fe ff78 	bl	80058f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	73fb      	strb	r3, [r7, #15]
      break;
 8006a06:	bf00      	nop
  }

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000258 	.word	0x20000258

08006a18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88db      	ldrh	r3, [r3, #6]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d004      	beq.n	8006a34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8e2 	bl	8006bf6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a32:	e023      	b.n	8006a7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	dc02      	bgt.n	8006a46 <USBD_GetConfig+0x2e>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc03      	bgt.n	8006a4c <USBD_GetConfig+0x34>
 8006a44:	e015      	b.n	8006a72 <USBD_GetConfig+0x5a>
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d00b      	beq.n	8006a62 <USBD_GetConfig+0x4a>
 8006a4a:	e012      	b.n	8006a72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3308      	adds	r3, #8
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f948 	bl	8006cf0 <USBD_CtlSendData>
        break;
 8006a60:	e00c      	b.n	8006a7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2201      	movs	r2, #1
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f940 	bl	8006cf0 <USBD_CtlSendData>
        break;
 8006a70:	e004      	b.n	8006a7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f8be 	bl	8006bf6 <USBD_CtlError>
        break;
 8006a7a:	bf00      	nop
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d81e      	bhi.n	8006ada <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	88db      	ldrh	r3, [r3, #6]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d004      	beq.n	8006aae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8a5 	bl	8006bf6 <USBD_CtlError>
        break;
 8006aac:	e01a      	b.n	8006ae4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f043 0202 	orr.w	r2, r3, #2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	330c      	adds	r3, #12
 8006ace:	2202      	movs	r2, #2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f90c 	bl	8006cf0 <USBD_CtlSendData>
      break;
 8006ad8:	e004      	b.n	8006ae4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f88a 	bl	8006bf6 <USBD_CtlError>
      break;
 8006ae2:	bf00      	nop
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d107      	bne.n	8006b0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f953 	bl	8006db2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b0c:	e013      	b.n	8006b36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	885b      	ldrh	r3, [r3, #2]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d10b      	bne.n	8006b2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	889b      	ldrh	r3, [r3, #4]
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f943 	bl	8006db2 <USBD_CtlSendStatus>
}
 8006b2c:	e003      	b.n	8006b36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f860 	bl	8006bf6 <USBD_CtlError>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d80b      	bhi.n	8006b6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d10c      	bne.n	8006b78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f923 	bl	8006db2 <USBD_CtlSendStatus>
      }
      break;
 8006b6c:	e004      	b.n	8006b78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f840 	bl	8006bf6 <USBD_CtlError>
      break;
 8006b76:	e000      	b.n	8006b7a <USBD_ClrFeature+0x3c>
      break;
 8006b78:	bf00      	nop
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	781a      	ldrb	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7ff fa3d 	bl	800602c <SWAPBYTE>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fa30 	bl	800602c <SWAPBYTE>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fa23 	bl	800602c <SWAPBYTE>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	80da      	strh	r2, [r3, #6]
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c00:	2180      	movs	r1, #128	@ 0x80
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fcf4 	bl	80075f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c08:	2100      	movs	r1, #0
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fcf0 	bl	80075f0 <USBD_LL_StallEP>
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d042      	beq.n	8006cb4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f000 f842 	bl	8006cbc <USBD_GetLen>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c42:	d808      	bhi.n	8006c56 <USBD_GetString+0x3e>
 8006c44:	6938      	ldr	r0, [r7, #16]
 8006c46:	f000 f839 	bl	8006cbc <USBD_GetLen>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	e001      	b.n	8006c5a <USBD_GetString+0x42>
 8006c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	4413      	add	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	2203      	movs	r2, #3
 8006c78:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c80:	e013      	b.n	8006caa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	4413      	add	r3, r2
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	613b      	str	r3, [r7, #16]
    idx++;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	3301      	adds	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e7      	bne.n	8006c82 <USBD_GetString+0x6a>
 8006cb2:	e000      	b.n	8006cb6 <USBD_GetString+0x9e>
    return;
 8006cb4:	bf00      	nop
  }
}
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ccc:	e005      	b.n	8006cda <USBD_GetLen+0x1e>
  {
    len++;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f5      	bne.n	8006cce <USBD_GetLen+0x12>
  }

  return len;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fcf0 	bl	8007702 <USBD_LL_Transmit>

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fcdf 	bl	8007702 <USBD_LL_Transmit>

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fcdf 	bl	8007744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	2100      	movs	r1, #0
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fcce 	bl	8007744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc9a 	bl	8007702 <USBD_LL_Transmit>

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2205      	movs	r2, #5
 8006de4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fca8 	bl	8007744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e04:	2200      	movs	r2, #0
 8006e06:	4912      	ldr	r1, [pc, #72]	@ (8006e50 <MX_USB_DEVICE_Init+0x50>)
 8006e08:	4812      	ldr	r0, [pc, #72]	@ (8006e54 <MX_USB_DEVICE_Init+0x54>)
 8006e0a:	f7fe fcd9 	bl	80057c0 <USBD_Init>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e14:	f7f9 fd60 	bl	80008d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e18:	490f      	ldr	r1, [pc, #60]	@ (8006e58 <MX_USB_DEVICE_Init+0x58>)
 8006e1a:	480e      	ldr	r0, [pc, #56]	@ (8006e54 <MX_USB_DEVICE_Init+0x54>)
 8006e1c:	f7fe fd00 	bl	8005820 <USBD_RegisterClass>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e26:	f7f9 fd57 	bl	80008d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e2a:	490c      	ldr	r1, [pc, #48]	@ (8006e5c <MX_USB_DEVICE_Init+0x5c>)
 8006e2c:	4809      	ldr	r0, [pc, #36]	@ (8006e54 <MX_USB_DEVICE_Init+0x54>)
 8006e2e:	f7fe fbf7 	bl	8005620 <USBD_CDC_RegisterInterface>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e38:	f7f9 fd4e 	bl	80008d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e3c:	4805      	ldr	r0, [pc, #20]	@ (8006e54 <MX_USB_DEVICE_Init+0x54>)
 8006e3e:	f7fe fd25 	bl	800588c <USBD_Start>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e48:	f7f9 fd46 	bl	80008d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e4c:	bf00      	nop
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	200000ac 	.word	0x200000ac
 8006e54:	2000025c 	.word	0x2000025c
 8006e58:	20000018 	.word	0x20000018
 8006e5c:	20000098 	.word	0x20000098

08006e60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e64:	2200      	movs	r2, #0
 8006e66:	4905      	ldr	r1, [pc, #20]	@ (8006e7c <CDC_Init_FS+0x1c>)
 8006e68:	4805      	ldr	r0, [pc, #20]	@ (8006e80 <CDC_Init_FS+0x20>)
 8006e6a:	f7fe fbf3 	bl	8005654 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e6e:	4905      	ldr	r1, [pc, #20]	@ (8006e84 <CDC_Init_FS+0x24>)
 8006e70:	4803      	ldr	r0, [pc, #12]	@ (8006e80 <CDC_Init_FS+0x20>)
 8006e72:	f7fe fc11 	bl	8005698 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000d38 	.word	0x20000d38
 8006e80:	2000025c 	.word	0x2000025c
 8006e84:	20000538 	.word	0x20000538

08006e88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b23      	cmp	r3, #35	@ 0x23
 8006eac:	d84a      	bhi.n	8006f44 <CDC_Control_FS+0xac>
 8006eae:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <CDC_Control_FS+0x1c>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006f45 	.word	0x08006f45
 8006eb8:	08006f45 	.word	0x08006f45
 8006ebc:	08006f45 	.word	0x08006f45
 8006ec0:	08006f45 	.word	0x08006f45
 8006ec4:	08006f45 	.word	0x08006f45
 8006ec8:	08006f45 	.word	0x08006f45
 8006ecc:	08006f45 	.word	0x08006f45
 8006ed0:	08006f45 	.word	0x08006f45
 8006ed4:	08006f45 	.word	0x08006f45
 8006ed8:	08006f45 	.word	0x08006f45
 8006edc:	08006f45 	.word	0x08006f45
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	08006f45 	.word	0x08006f45
 8006eec:	08006f45 	.word	0x08006f45
 8006ef0:	08006f45 	.word	0x08006f45
 8006ef4:	08006f45 	.word	0x08006f45
 8006ef8:	08006f45 	.word	0x08006f45
 8006efc:	08006f45 	.word	0x08006f45
 8006f00:	08006f45 	.word	0x08006f45
 8006f04:	08006f45 	.word	0x08006f45
 8006f08:	08006f45 	.word	0x08006f45
 8006f0c:	08006f45 	.word	0x08006f45
 8006f10:	08006f45 	.word	0x08006f45
 8006f14:	08006f45 	.word	0x08006f45
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	08006f45 	.word	0x08006f45
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f45 	.word	0x08006f45
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	08006f45 	.word	0x08006f45
 8006f30:	08006f45 	.word	0x08006f45
 8006f34:	08006f45 	.word	0x08006f45
 8006f38:	08006f45 	.word	0x08006f45
 8006f3c:	08006f45 	.word	0x08006f45
 8006f40:	08006f45 	.word	0x08006f45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f44:	bf00      	nop
  }

  return (USBD_OK);
 8006f46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4805      	ldr	r0, [pc, #20]	@ (8006f78 <CDC_Receive_FS+0x24>)
 8006f62:	f7fe fb99 	bl	8005698 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f66:	4804      	ldr	r0, [pc, #16]	@ (8006f78 <CDC_Receive_FS+0x24>)
 8006f68:	f7fe fbf4 	bl	8005754 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	2000025c 	.word	0x2000025c

08006f7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <CDC_Transmit_FS+0x48>)
 8006f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e00b      	b.n	8006fba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fa2:	887b      	ldrh	r3, [r7, #2]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4806      	ldr	r0, [pc, #24]	@ (8006fc4 <CDC_Transmit_FS+0x48>)
 8006faa:	f7fe fb53 	bl	8005654 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fae:	4805      	ldr	r0, [pc, #20]	@ (8006fc4 <CDC_Transmit_FS+0x48>)
 8006fb0:	f7fe fb90 	bl	80056d4 <USBD_CDC_TransmitPacket>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000025c 	.word	0x2000025c

08006fc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2212      	movs	r2, #18
 8006ffc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	@ (800700c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	200000c8 	.word	0x200000c8

08007010 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	6039      	str	r1, [r7, #0]
 800701a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2204      	movs	r2, #4
 8007020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007022:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	200000dc 	.word	0x200000dc

08007034 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4907      	ldr	r1, [pc, #28]	@ (8007068 <USBD_FS_ProductStrDescriptor+0x34>)
 800704a:	4808      	ldr	r0, [pc, #32]	@ (800706c <USBD_FS_ProductStrDescriptor+0x38>)
 800704c:	f7ff fde4 	bl	8006c18 <USBD_GetString>
 8007050:	e004      	b.n	800705c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	4904      	ldr	r1, [pc, #16]	@ (8007068 <USBD_FS_ProductStrDescriptor+0x34>)
 8007056:	4805      	ldr	r0, [pc, #20]	@ (800706c <USBD_FS_ProductStrDescriptor+0x38>)
 8007058:	f7ff fdde 	bl	8006c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800705c:	4b02      	ldr	r3, [pc, #8]	@ (8007068 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20001538 	.word	0x20001538
 800706c:	08008194 	.word	0x08008194

08007070 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	4904      	ldr	r1, [pc, #16]	@ (8007090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007080:	4804      	ldr	r0, [pc, #16]	@ (8007094 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007082:	f7ff fdc9 	bl	8006c18 <USBD_GetString>
  return USBD_StrDesc;
 8007086:	4b02      	ldr	r3, [pc, #8]	@ (8007090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001538 	.word	0x20001538
 8007094:	080081ac 	.word	0x080081ac

08007098 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	221a      	movs	r2, #26
 80070a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070aa:	f000 f843 	bl	8007134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070ae:	4b02      	ldr	r3, [pc, #8]	@ (80070b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200000e0 	.word	0x200000e0

080070bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4907      	ldr	r1, [pc, #28]	@ (80070f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070d2:	4808      	ldr	r0, [pc, #32]	@ (80070f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d4:	f7ff fda0 	bl	8006c18 <USBD_GetString>
 80070d8:	e004      	b.n	80070e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4904      	ldr	r1, [pc, #16]	@ (80070f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070de:	4805      	ldr	r0, [pc, #20]	@ (80070f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070e0:	f7ff fd9a 	bl	8006c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e4:	4b02      	ldr	r3, [pc, #8]	@ (80070f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20001538 	.word	0x20001538
 80070f4:	080081c0 	.word	0x080081c0

080070f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4907      	ldr	r1, [pc, #28]	@ (800712c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800710e:	4808      	ldr	r0, [pc, #32]	@ (8007130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007110:	f7ff fd82 	bl	8006c18 <USBD_GetString>
 8007114:	e004      	b.n	8007120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4904      	ldr	r1, [pc, #16]	@ (800712c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800711a:	4805      	ldr	r0, [pc, #20]	@ (8007130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800711c:	f7ff fd7c 	bl	8006c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007120:	4b02      	ldr	r3, [pc, #8]	@ (800712c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20001538 	.word	0x20001538
 8007130:	080081cc 	.word	0x080081cc

08007134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800713a:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <Get_SerialNum+0x44>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007140:	4b0e      	ldr	r3, [pc, #56]	@ (800717c <Get_SerialNum+0x48>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007146:	4b0e      	ldr	r3, [pc, #56]	@ (8007180 <Get_SerialNum+0x4c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800715a:	2208      	movs	r2, #8
 800715c:	4909      	ldr	r1, [pc, #36]	@ (8007184 <Get_SerialNum+0x50>)
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f814 	bl	800718c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007164:	2204      	movs	r2, #4
 8007166:	4908      	ldr	r1, [pc, #32]	@ (8007188 <Get_SerialNum+0x54>)
 8007168:	68b8      	ldr	r0, [r7, #8]
 800716a:	f000 f80f 	bl	800718c <IntToUnicode>
  }
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	1fff7a10 	.word	0x1fff7a10
 800717c:	1fff7a14 	.word	0x1fff7a14
 8007180:	1fff7a18 	.word	0x1fff7a18
 8007184:	200000e2 	.word	0x200000e2
 8007188:	200000f2 	.word	0x200000f2

0800718c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
 80071a2:	e027      	b.n	80071f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0f1b      	lsrs	r3, r3, #28
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d80b      	bhi.n	80071c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0f1b      	lsrs	r3, r3, #28
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4619      	mov	r1, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	440b      	add	r3, r1
 80071bc:	3230      	adds	r2, #48	@ 0x30
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	e00a      	b.n	80071da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	0f1b      	lsrs	r3, r3, #28
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4619      	mov	r1, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	440b      	add	r3, r1
 80071d4:	3237      	adds	r2, #55	@ 0x37
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	3301      	adds	r3, #1
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4413      	add	r3, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	3301      	adds	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
 80071f4:	7dfa      	ldrb	r2, [r7, #23]
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3d3      	bcc.n	80071a4 <IntToUnicode+0x18>
  }
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	@ 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	609a      	str	r2, [r3, #8]
 8007220:	60da      	str	r2, [r3, #12]
 8007222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800722c:	d13a      	bne.n	80072a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	4b1e      	ldr	r3, [pc, #120]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007236:	4a1d      	ldr	r2, [pc, #116]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	6313      	str	r3, [r2, #48]	@ 0x30
 800723e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800724a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800724e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007250:	2302      	movs	r3, #2
 8007252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007254:	2300      	movs	r3, #0
 8007256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007258:	2303      	movs	r3, #3
 800725a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800725c:	230a      	movs	r3, #10
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4619      	mov	r1, r3
 8007266:	4812      	ldr	r0, [pc, #72]	@ (80072b0 <HAL_PCD_MspInit+0xa4>)
 8007268:	f7f9 fe9e 	bl	8000fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800726c:	4b0f      	ldr	r3, [pc, #60]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 800726e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007270:	4a0e      	ldr	r2, [pc, #56]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 8007272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007276:	6353      	str	r3, [r2, #52]	@ 0x34
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	4b0b      	ldr	r3, [pc, #44]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 800727e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007280:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 8007282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007286:	6453      	str	r3, [r2, #68]	@ 0x44
 8007288:	4b08      	ldr	r3, [pc, #32]	@ (80072ac <HAL_PCD_MspInit+0xa0>)
 800728a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007294:	2200      	movs	r2, #0
 8007296:	2100      	movs	r1, #0
 8007298:	2043      	movs	r0, #67	@ 0x43
 800729a:	f7f9 fe4e 	bl	8000f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800729e:	2043      	movs	r0, #67	@ 0x43
 80072a0:	f7f9 fe67 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072a4:	bf00      	nop
 80072a6:	3728      	adds	r7, #40	@ 0x28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40020000 	.word	0x40020000

080072b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f7fe fb2b 	bl	8005926 <USBD_LL_SetupStage>
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	4619      	mov	r1, r3
 8007302:	f7fe fb65 	bl	80059d0 <USBD_LL_DataOutStage>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3320      	adds	r3, #32
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	4619      	mov	r1, r3
 8007336:	f7fe fc07 	bl	8005b48 <USBD_LL_DataInStage>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fd4b 	bl	8005dec <USBD_LL_SOF>
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	79db      	ldrb	r3, [r3, #7]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
 8007376:	e008      	b.n	800738a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	79db      	ldrb	r3, [r3, #7]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d102      	bne.n	8007386 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
 8007384:	e001      	b.n	800738a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007386:	f7f9 faa7 	bl	80008d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007390:	7bfa      	ldrb	r2, [r7, #15]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fce5 	bl	8005d64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fc8c 	bl	8005cbe <USBD_LL_Reset>
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fce0 	bl	8005d84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7adb      	ldrb	r3, [r3, #11]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073e4:	4b04      	ldr	r3, [pc, #16]	@ (80073f8 <HAL_PCD_SuspendCallback+0x48>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	4a03      	ldr	r2, [pc, #12]	@ (80073f8 <HAL_PCD_SuspendCallback+0x48>)
 80073ea:	f043 0306 	orr.w	r3, r3, #6
 80073ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	e000ed00 	.word	0xe000ed00

080073fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fcd6 	bl	8005dbc <USBD_LL_Resume>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fd2e 	bl	8005e90 <USBD_LL_IsoOUTIncomplete>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fcea 	bl	8005e2c <USBD_LL_IsoINIncomplete>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fd40 	bl	8005ef4 <USBD_LL_DevConnected>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fd3d 	bl	8005f0a <USBD_LL_DevDisconnected>
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d13c      	bne.n	8007522 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074a8:	4a20      	ldr	r2, [pc, #128]	@ (800752c <USBD_LL_Init+0x94>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a1e      	ldr	r2, [pc, #120]	@ (800752c <USBD_LL_Init+0x94>)
 80074b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074b8:	4b1c      	ldr	r3, [pc, #112]	@ (800752c <USBD_LL_Init+0x94>)
 80074ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80074be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074c0:	4b1a      	ldr	r3, [pc, #104]	@ (800752c <USBD_LL_Init+0x94>)
 80074c2:	2204      	movs	r2, #4
 80074c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074c6:	4b19      	ldr	r3, [pc, #100]	@ (800752c <USBD_LL_Init+0x94>)
 80074c8:	2202      	movs	r2, #2
 80074ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074cc:	4b17      	ldr	r3, [pc, #92]	@ (800752c <USBD_LL_Init+0x94>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074d2:	4b16      	ldr	r3, [pc, #88]	@ (800752c <USBD_LL_Init+0x94>)
 80074d4:	2202      	movs	r2, #2
 80074d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074d8:	4b14      	ldr	r3, [pc, #80]	@ (800752c <USBD_LL_Init+0x94>)
 80074da:	2200      	movs	r2, #0
 80074dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074de:	4b13      	ldr	r3, [pc, #76]	@ (800752c <USBD_LL_Init+0x94>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074e4:	4b11      	ldr	r3, [pc, #68]	@ (800752c <USBD_LL_Init+0x94>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074ea:	4b10      	ldr	r3, [pc, #64]	@ (800752c <USBD_LL_Init+0x94>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074f0:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <USBD_LL_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074f6:	480d      	ldr	r0, [pc, #52]	@ (800752c <USBD_LL_Init+0x94>)
 80074f8:	f7f9 ff0b 	bl	8001312 <HAL_PCD_Init>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007502:	f7f9 f9e9 	bl	80008d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007506:	2180      	movs	r1, #128	@ 0x80
 8007508:	4808      	ldr	r0, [pc, #32]	@ (800752c <USBD_LL_Init+0x94>)
 800750a:	f7fb f938 	bl	800277e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800750e:	2240      	movs	r2, #64	@ 0x40
 8007510:	2100      	movs	r1, #0
 8007512:	4806      	ldr	r0, [pc, #24]	@ (800752c <USBD_LL_Init+0x94>)
 8007514:	f7fb f8ec 	bl	80026f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007518:	2280      	movs	r2, #128	@ 0x80
 800751a:	2101      	movs	r1, #1
 800751c:	4803      	ldr	r0, [pc, #12]	@ (800752c <USBD_LL_Init+0x94>)
 800751e:	f7fb f8e7 	bl	80026f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20001738 	.word	0x20001738

08007530 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007546:	4618      	mov	r0, r3
 8007548:	f7f9 fff2 	bl	8001530 <HAL_PCD_Start>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 f942 	bl	80077dc <USBD_Get_USB_Status>
 8007558:	4603      	mov	r3, r0
 800755a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800755c:	7bbb      	ldrb	r3, [r7, #14]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	461a      	mov	r2, r3
 8007574:	4603      	mov	r3, r0
 8007576:	70fb      	strb	r3, [r7, #3]
 8007578:	460b      	mov	r3, r1
 800757a:	70bb      	strb	r3, [r7, #2]
 800757c:	4613      	mov	r3, r2
 800757e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800758e:	78bb      	ldrb	r3, [r7, #2]
 8007590:	883a      	ldrh	r2, [r7, #0]
 8007592:	78f9      	ldrb	r1, [r7, #3]
 8007594:	f7fa fcc6 	bl	8001f24 <HAL_PCD_EP_Open>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f91c 	bl	80077dc <USBD_Get_USB_Status>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fa fd11 	bl	8001ff8 <HAL_PCD_EP_Close>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 f8fd 	bl	80077dc <USBD_Get_USB_Status>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f7fa fdc9 	bl	80021a6 <HAL_PCD_EP_SetStall>
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f8de 	bl	80077dc <USBD_Get_USB_Status>
 8007620:	4603      	mov	r3, r0
 8007622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007624:	7bbb      	ldrb	r3, [r7, #14]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	460b      	mov	r3, r1
 8007638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f7fa fe0d 	bl	800226c <HAL_PCD_EP_ClrStall>
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f8bf 	bl	80077dc <USBD_Get_USB_Status>
 800765e:	4603      	mov	r3, r0
 8007660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007662:	7bbb      	ldrb	r3, [r7, #14]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800767e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007684:	2b00      	cmp	r3, #0
 8007686:	da0b      	bge.n	80076a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	4613      	mov	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	3316      	adds	r3, #22
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	e00b      	b.n	80076b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80076b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fa fbfa 	bl	8001edc <HAL_PCD_SetAddress>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f874 	bl	80077dc <USBD_Get_USB_Status>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b086      	sub	sp, #24
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	460b      	mov	r3, r1
 8007710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007720:	7af9      	ldrb	r1, [r7, #11]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	f7fa fd04 	bl	8002132 <HAL_PCD_EP_Transmit>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f853 	bl	80077dc <USBD_Get_USB_Status>
 8007736:	4603      	mov	r3, r0
 8007738:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800773a:	7dbb      	ldrb	r3, [r7, #22]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	460b      	mov	r3, r1
 8007752:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007762:	7af9      	ldrb	r1, [r7, #11]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	f7fa fc90 	bl	800208c <HAL_PCD_EP_Receive>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f832 	bl	80077dc <USBD_Get_USB_Status>
 8007778:	4603      	mov	r3, r0
 800777a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800777c:	7dbb      	ldrb	r3, [r7, #22]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7fa fcb0 	bl	8002102 <HAL_PCD_EP_GetRxCount>
 80077a2:	4603      	mov	r3, r0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077b4:	4b03      	ldr	r3, [pc, #12]	@ (80077c4 <USBD_static_malloc+0x18>)
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20001c1c 	.word	0x20001c1c

080077c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d817      	bhi.n	8007820 <USBD_Get_USB_Status+0x44>
 80077f0:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <USBD_Get_USB_Status+0x1c>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007809 	.word	0x08007809
 80077fc:	0800780f 	.word	0x0800780f
 8007800:	08007815 	.word	0x08007815
 8007804:	0800781b 	.word	0x0800781b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
    break;
 800780c:	e00b      	b.n	8007826 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800780e:	2303      	movs	r3, #3
 8007810:	73fb      	strb	r3, [r7, #15]
    break;
 8007812:	e008      	b.n	8007826 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007814:	2301      	movs	r3, #1
 8007816:	73fb      	strb	r3, [r7, #15]
    break;
 8007818:	e005      	b.n	8007826 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800781a:	2303      	movs	r3, #3
 800781c:	73fb      	strb	r3, [r7, #15]
    break;
 800781e:	e002      	b.n	8007826 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	bf00      	nop
  }
  return usb_status;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <siprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	b510      	push	{r4, lr}
 8007838:	b09d      	sub	sp, #116	@ 0x74
 800783a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800783c:	9002      	str	r0, [sp, #8]
 800783e:	9006      	str	r0, [sp, #24]
 8007840:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007844:	480a      	ldr	r0, [pc, #40]	@ (8007870 <siprintf+0x3c>)
 8007846:	9107      	str	r1, [sp, #28]
 8007848:	9104      	str	r1, [sp, #16]
 800784a:	490a      	ldr	r1, [pc, #40]	@ (8007874 <siprintf+0x40>)
 800784c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	2400      	movs	r4, #0
 8007854:	a902      	add	r1, sp, #8
 8007856:	6800      	ldr	r0, [r0, #0]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800785c:	f000 f994 	bl	8007b88 <_svfiprintf_r>
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	701c      	strb	r4, [r3, #0]
 8007864:	b01d      	add	sp, #116	@ 0x74
 8007866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800786a:	b003      	add	sp, #12
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	200000fc 	.word	0x200000fc
 8007874:	ffff0208 	.word	0xffff0208

08007878 <memset>:
 8007878:	4402      	add	r2, r0
 800787a:	4603      	mov	r3, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	d100      	bne.n	8007882 <memset+0xa>
 8007880:	4770      	bx	lr
 8007882:	f803 1b01 	strb.w	r1, [r3], #1
 8007886:	e7f9      	b.n	800787c <memset+0x4>

08007888 <__errno>:
 8007888:	4b01      	ldr	r3, [pc, #4]	@ (8007890 <__errno+0x8>)
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200000fc 	.word	0x200000fc

08007894 <__libc_init_array>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	4d0d      	ldr	r5, [pc, #52]	@ (80078cc <__libc_init_array+0x38>)
 8007898:	4c0d      	ldr	r4, [pc, #52]	@ (80078d0 <__libc_init_array+0x3c>)
 800789a:	1b64      	subs	r4, r4, r5
 800789c:	10a4      	asrs	r4, r4, #2
 800789e:	2600      	movs	r6, #0
 80078a0:	42a6      	cmp	r6, r4
 80078a2:	d109      	bne.n	80078b8 <__libc_init_array+0x24>
 80078a4:	4d0b      	ldr	r5, [pc, #44]	@ (80078d4 <__libc_init_array+0x40>)
 80078a6:	4c0c      	ldr	r4, [pc, #48]	@ (80078d8 <__libc_init_array+0x44>)
 80078a8:	f000 fc64 	bl	8008174 <_init>
 80078ac:	1b64      	subs	r4, r4, r5
 80078ae:	10a4      	asrs	r4, r4, #2
 80078b0:	2600      	movs	r6, #0
 80078b2:	42a6      	cmp	r6, r4
 80078b4:	d105      	bne.n	80078c2 <__libc_init_array+0x2e>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078bc:	4798      	blx	r3
 80078be:	3601      	adds	r6, #1
 80078c0:	e7ee      	b.n	80078a0 <__libc_init_array+0xc>
 80078c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c6:	4798      	blx	r3
 80078c8:	3601      	adds	r6, #1
 80078ca:	e7f2      	b.n	80078b2 <__libc_init_array+0x1e>
 80078cc:	08008230 	.word	0x08008230
 80078d0:	08008230 	.word	0x08008230
 80078d4:	08008230 	.word	0x08008230
 80078d8:	08008234 	.word	0x08008234

080078dc <__retarget_lock_acquire_recursive>:
 80078dc:	4770      	bx	lr

080078de <__retarget_lock_release_recursive>:
 80078de:	4770      	bx	lr

080078e0 <_free_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4605      	mov	r5, r0
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d041      	beq.n	800796c <_free_r+0x8c>
 80078e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ec:	1f0c      	subs	r4, r1, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfb8      	it	lt
 80078f2:	18e4      	addlt	r4, r4, r3
 80078f4:	f000 f8e0 	bl	8007ab8 <__malloc_lock>
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <_free_r+0x90>)
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	b933      	cbnz	r3, 800790c <_free_r+0x2c>
 80078fe:	6063      	str	r3, [r4, #4]
 8007900:	6014      	str	r4, [r2, #0]
 8007902:	4628      	mov	r0, r5
 8007904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007908:	f000 b8dc 	b.w	8007ac4 <__malloc_unlock>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d908      	bls.n	8007922 <_free_r+0x42>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	1821      	adds	r1, r4, r0
 8007914:	428b      	cmp	r3, r1
 8007916:	bf01      	itttt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	1809      	addeq	r1, r1, r0
 800791e:	6021      	streq	r1, [r4, #0]
 8007920:	e7ed      	b.n	80078fe <_free_r+0x1e>
 8007922:	461a      	mov	r2, r3
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b10b      	cbz	r3, 800792c <_free_r+0x4c>
 8007928:	42a3      	cmp	r3, r4
 800792a:	d9fa      	bls.n	8007922 <_free_r+0x42>
 800792c:	6811      	ldr	r1, [r2, #0]
 800792e:	1850      	adds	r0, r2, r1
 8007930:	42a0      	cmp	r0, r4
 8007932:	d10b      	bne.n	800794c <_free_r+0x6c>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	4401      	add	r1, r0
 8007938:	1850      	adds	r0, r2, r1
 800793a:	4283      	cmp	r3, r0
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	d1e0      	bne.n	8007902 <_free_r+0x22>
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	4408      	add	r0, r1
 8007948:	6010      	str	r0, [r2, #0]
 800794a:	e7da      	b.n	8007902 <_free_r+0x22>
 800794c:	d902      	bls.n	8007954 <_free_r+0x74>
 800794e:	230c      	movs	r3, #12
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	e7d6      	b.n	8007902 <_free_r+0x22>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	1821      	adds	r1, r4, r0
 8007958:	428b      	cmp	r3, r1
 800795a:	bf04      	itt	eq
 800795c:	6819      	ldreq	r1, [r3, #0]
 800795e:	685b      	ldreq	r3, [r3, #4]
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	bf04      	itt	eq
 8007964:	1809      	addeq	r1, r1, r0
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	6054      	str	r4, [r2, #4]
 800796a:	e7ca      	b.n	8007902 <_free_r+0x22>
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	20001f80 	.word	0x20001f80

08007974 <sbrk_aligned>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4e0f      	ldr	r6, [pc, #60]	@ (80079b4 <sbrk_aligned+0x40>)
 8007978:	460c      	mov	r4, r1
 800797a:	6831      	ldr	r1, [r6, #0]
 800797c:	4605      	mov	r5, r0
 800797e:	b911      	cbnz	r1, 8007986 <sbrk_aligned+0x12>
 8007980:	f000 fba4 	bl	80080cc <_sbrk_r>
 8007984:	6030      	str	r0, [r6, #0]
 8007986:	4621      	mov	r1, r4
 8007988:	4628      	mov	r0, r5
 800798a:	f000 fb9f 	bl	80080cc <_sbrk_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	d103      	bne.n	800799a <sbrk_aligned+0x26>
 8007992:	f04f 34ff 	mov.w	r4, #4294967295
 8007996:	4620      	mov	r0, r4
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	1cc4      	adds	r4, r0, #3
 800799c:	f024 0403 	bic.w	r4, r4, #3
 80079a0:	42a0      	cmp	r0, r4
 80079a2:	d0f8      	beq.n	8007996 <sbrk_aligned+0x22>
 80079a4:	1a21      	subs	r1, r4, r0
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 fb90 	bl	80080cc <_sbrk_r>
 80079ac:	3001      	adds	r0, #1
 80079ae:	d1f2      	bne.n	8007996 <sbrk_aligned+0x22>
 80079b0:	e7ef      	b.n	8007992 <sbrk_aligned+0x1e>
 80079b2:	bf00      	nop
 80079b4:	20001f7c 	.word	0x20001f7c

080079b8 <_malloc_r>:
 80079b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079bc:	1ccd      	adds	r5, r1, #3
 80079be:	f025 0503 	bic.w	r5, r5, #3
 80079c2:	3508      	adds	r5, #8
 80079c4:	2d0c      	cmp	r5, #12
 80079c6:	bf38      	it	cc
 80079c8:	250c      	movcc	r5, #12
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	4606      	mov	r6, r0
 80079ce:	db01      	blt.n	80079d4 <_malloc_r+0x1c>
 80079d0:	42a9      	cmp	r1, r5
 80079d2:	d904      	bls.n	80079de <_malloc_r+0x26>
 80079d4:	230c      	movs	r3, #12
 80079d6:	6033      	str	r3, [r6, #0]
 80079d8:	2000      	movs	r0, #0
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ab4 <_malloc_r+0xfc>
 80079e2:	f000 f869 	bl	8007ab8 <__malloc_lock>
 80079e6:	f8d8 3000 	ldr.w	r3, [r8]
 80079ea:	461c      	mov	r4, r3
 80079ec:	bb44      	cbnz	r4, 8007a40 <_malloc_r+0x88>
 80079ee:	4629      	mov	r1, r5
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff ffbf 	bl	8007974 <sbrk_aligned>
 80079f6:	1c43      	adds	r3, r0, #1
 80079f8:	4604      	mov	r4, r0
 80079fa:	d158      	bne.n	8007aae <_malloc_r+0xf6>
 80079fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007a00:	4627      	mov	r7, r4
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	d143      	bne.n	8007a8e <_malloc_r+0xd6>
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d04b      	beq.n	8007aa2 <_malloc_r+0xea>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	4630      	mov	r0, r6
 8007a10:	eb04 0903 	add.w	r9, r4, r3
 8007a14:	f000 fb5a 	bl	80080cc <_sbrk_r>
 8007a18:	4581      	cmp	r9, r0
 8007a1a:	d142      	bne.n	8007aa2 <_malloc_r+0xea>
 8007a1c:	6821      	ldr	r1, [r4, #0]
 8007a1e:	1a6d      	subs	r5, r5, r1
 8007a20:	4629      	mov	r1, r5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff ffa6 	bl	8007974 <sbrk_aligned>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d03a      	beq.n	8007aa2 <_malloc_r+0xea>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	442b      	add	r3, r5
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	f8d8 3000 	ldr.w	r3, [r8]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	bb62      	cbnz	r2, 8007a94 <_malloc_r+0xdc>
 8007a3a:	f8c8 7000 	str.w	r7, [r8]
 8007a3e:	e00f      	b.n	8007a60 <_malloc_r+0xa8>
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	1b52      	subs	r2, r2, r5
 8007a44:	d420      	bmi.n	8007a88 <_malloc_r+0xd0>
 8007a46:	2a0b      	cmp	r2, #11
 8007a48:	d917      	bls.n	8007a7a <_malloc_r+0xc2>
 8007a4a:	1961      	adds	r1, r4, r5
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	6025      	str	r5, [r4, #0]
 8007a50:	bf18      	it	ne
 8007a52:	6059      	strne	r1, [r3, #4]
 8007a54:	6863      	ldr	r3, [r4, #4]
 8007a56:	bf08      	it	eq
 8007a58:	f8c8 1000 	streq.w	r1, [r8]
 8007a5c:	5162      	str	r2, [r4, r5]
 8007a5e:	604b      	str	r3, [r1, #4]
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 f82f 	bl	8007ac4 <__malloc_unlock>
 8007a66:	f104 000b 	add.w	r0, r4, #11
 8007a6a:	1d23      	adds	r3, r4, #4
 8007a6c:	f020 0007 	bic.w	r0, r0, #7
 8007a70:	1ac2      	subs	r2, r0, r3
 8007a72:	bf1c      	itt	ne
 8007a74:	1a1b      	subne	r3, r3, r0
 8007a76:	50a3      	strne	r3, [r4, r2]
 8007a78:	e7af      	b.n	80079da <_malloc_r+0x22>
 8007a7a:	6862      	ldr	r2, [r4, #4]
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	bf0c      	ite	eq
 8007a80:	f8c8 2000 	streq.w	r2, [r8]
 8007a84:	605a      	strne	r2, [r3, #4]
 8007a86:	e7eb      	b.n	8007a60 <_malloc_r+0xa8>
 8007a88:	4623      	mov	r3, r4
 8007a8a:	6864      	ldr	r4, [r4, #4]
 8007a8c:	e7ae      	b.n	80079ec <_malloc_r+0x34>
 8007a8e:	463c      	mov	r4, r7
 8007a90:	687f      	ldr	r7, [r7, #4]
 8007a92:	e7b6      	b.n	8007a02 <_malloc_r+0x4a>
 8007a94:	461a      	mov	r2, r3
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	42a3      	cmp	r3, r4
 8007a9a:	d1fb      	bne.n	8007a94 <_malloc_r+0xdc>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6053      	str	r3, [r2, #4]
 8007aa0:	e7de      	b.n	8007a60 <_malloc_r+0xa8>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f000 f80c 	bl	8007ac4 <__malloc_unlock>
 8007aac:	e794      	b.n	80079d8 <_malloc_r+0x20>
 8007aae:	6005      	str	r5, [r0, #0]
 8007ab0:	e7d6      	b.n	8007a60 <_malloc_r+0xa8>
 8007ab2:	bf00      	nop
 8007ab4:	20001f80 	.word	0x20001f80

08007ab8 <__malloc_lock>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	@ (8007ac0 <__malloc_lock+0x8>)
 8007aba:	f7ff bf0f 	b.w	80078dc <__retarget_lock_acquire_recursive>
 8007abe:	bf00      	nop
 8007ac0:	20001f78 	.word	0x20001f78

08007ac4 <__malloc_unlock>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	@ (8007acc <__malloc_unlock+0x8>)
 8007ac6:	f7ff bf0a 	b.w	80078de <__retarget_lock_release_recursive>
 8007aca:	bf00      	nop
 8007acc:	20001f78 	.word	0x20001f78

08007ad0 <__ssputs_r>:
 8007ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	688e      	ldr	r6, [r1, #8]
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	42be      	cmp	r6, r7
 8007ada:	680b      	ldr	r3, [r1, #0]
 8007adc:	4682      	mov	sl, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4690      	mov	r8, r2
 8007ae2:	d82d      	bhi.n	8007b40 <__ssputs_r+0x70>
 8007ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007aec:	d026      	beq.n	8007b3c <__ssputs_r+0x6c>
 8007aee:	6965      	ldr	r5, [r4, #20]
 8007af0:	6909      	ldr	r1, [r1, #16]
 8007af2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af6:	eba3 0901 	sub.w	r9, r3, r1
 8007afa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007afe:	1c7b      	adds	r3, r7, #1
 8007b00:	444b      	add	r3, r9
 8007b02:	106d      	asrs	r5, r5, #1
 8007b04:	429d      	cmp	r5, r3
 8007b06:	bf38      	it	cc
 8007b08:	461d      	movcc	r5, r3
 8007b0a:	0553      	lsls	r3, r2, #21
 8007b0c:	d527      	bpl.n	8007b5e <__ssputs_r+0x8e>
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7ff ff52 	bl	80079b8 <_malloc_r>
 8007b14:	4606      	mov	r6, r0
 8007b16:	b360      	cbz	r0, 8007b72 <__ssputs_r+0xa2>
 8007b18:	6921      	ldr	r1, [r4, #16]
 8007b1a:	464a      	mov	r2, r9
 8007b1c:	f000 fae6 	bl	80080ec <memcpy>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	6126      	str	r6, [r4, #16]
 8007b2e:	6165      	str	r5, [r4, #20]
 8007b30:	444e      	add	r6, r9
 8007b32:	eba5 0509 	sub.w	r5, r5, r9
 8007b36:	6026      	str	r6, [r4, #0]
 8007b38:	60a5      	str	r5, [r4, #8]
 8007b3a:	463e      	mov	r6, r7
 8007b3c:	42be      	cmp	r6, r7
 8007b3e:	d900      	bls.n	8007b42 <__ssputs_r+0x72>
 8007b40:	463e      	mov	r6, r7
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	4632      	mov	r2, r6
 8007b46:	4641      	mov	r1, r8
 8007b48:	f000 faa6 	bl	8008098 <memmove>
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	1b9b      	subs	r3, r3, r6
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	4433      	add	r3, r6
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5e:	462a      	mov	r2, r5
 8007b60:	f000 fad2 	bl	8008108 <_realloc_r>
 8007b64:	4606      	mov	r6, r0
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d1e0      	bne.n	8007b2c <__ssputs_r+0x5c>
 8007b6a:	6921      	ldr	r1, [r4, #16]
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f7ff feb7 	bl	80078e0 <_free_r>
 8007b72:	230c      	movs	r3, #12
 8007b74:	f8ca 3000 	str.w	r3, [sl]
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	e7e9      	b.n	8007b5a <__ssputs_r+0x8a>
	...

08007b88 <_svfiprintf_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	4698      	mov	r8, r3
 8007b8e:	898b      	ldrh	r3, [r1, #12]
 8007b90:	061b      	lsls	r3, r3, #24
 8007b92:	b09d      	sub	sp, #116	@ 0x74
 8007b94:	4607      	mov	r7, r0
 8007b96:	460d      	mov	r5, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	d510      	bpl.n	8007bbe <_svfiprintf_r+0x36>
 8007b9c:	690b      	ldr	r3, [r1, #16]
 8007b9e:	b973      	cbnz	r3, 8007bbe <_svfiprintf_r+0x36>
 8007ba0:	2140      	movs	r1, #64	@ 0x40
 8007ba2:	f7ff ff09 	bl	80079b8 <_malloc_r>
 8007ba6:	6028      	str	r0, [r5, #0]
 8007ba8:	6128      	str	r0, [r5, #16]
 8007baa:	b930      	cbnz	r0, 8007bba <_svfiprintf_r+0x32>
 8007bac:	230c      	movs	r3, #12
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	b01d      	add	sp, #116	@ 0x74
 8007bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bba:	2340      	movs	r3, #64	@ 0x40
 8007bbc:	616b      	str	r3, [r5, #20]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc2:	2320      	movs	r3, #32
 8007bc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bcc:	2330      	movs	r3, #48	@ 0x30
 8007bce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d6c <_svfiprintf_r+0x1e4>
 8007bd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd6:	f04f 0901 	mov.w	r9, #1
 8007bda:	4623      	mov	r3, r4
 8007bdc:	469a      	mov	sl, r3
 8007bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be2:	b10a      	cbz	r2, 8007be8 <_svfiprintf_r+0x60>
 8007be4:	2a25      	cmp	r2, #37	@ 0x25
 8007be6:	d1f9      	bne.n	8007bdc <_svfiprintf_r+0x54>
 8007be8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bec:	d00b      	beq.n	8007c06 <_svfiprintf_r+0x7e>
 8007bee:	465b      	mov	r3, fp
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	f7ff ff6b 	bl	8007ad0 <__ssputs_r>
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	f000 80a7 	beq.w	8007d4e <_svfiprintf_r+0x1c6>
 8007c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c02:	445a      	add	r2, fp
 8007c04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c06:	f89a 3000 	ldrb.w	r3, [sl]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 809f 	beq.w	8007d4e <_svfiprintf_r+0x1c6>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295
 8007c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c1a:	f10a 0a01 	add.w	sl, sl, #1
 8007c1e:	9304      	str	r3, [sp, #16]
 8007c20:	9307      	str	r3, [sp, #28]
 8007c22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c26:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c28:	4654      	mov	r4, sl
 8007c2a:	2205      	movs	r2, #5
 8007c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c30:	484e      	ldr	r0, [pc, #312]	@ (8007d6c <_svfiprintf_r+0x1e4>)
 8007c32:	f7f8 fad5 	bl	80001e0 <memchr>
 8007c36:	9a04      	ldr	r2, [sp, #16]
 8007c38:	b9d8      	cbnz	r0, 8007c72 <_svfiprintf_r+0xea>
 8007c3a:	06d0      	lsls	r0, r2, #27
 8007c3c:	bf44      	itt	mi
 8007c3e:	2320      	movmi	r3, #32
 8007c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c44:	0711      	lsls	r1, r2, #28
 8007c46:	bf44      	itt	mi
 8007c48:	232b      	movmi	r3, #43	@ 0x2b
 8007c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c54:	d015      	beq.n	8007c82 <_svfiprintf_r+0xfa>
 8007c56:	9a07      	ldr	r2, [sp, #28]
 8007c58:	4654      	mov	r4, sl
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	f04f 0c0a 	mov.w	ip, #10
 8007c60:	4621      	mov	r1, r4
 8007c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c66:	3b30      	subs	r3, #48	@ 0x30
 8007c68:	2b09      	cmp	r3, #9
 8007c6a:	d94b      	bls.n	8007d04 <_svfiprintf_r+0x17c>
 8007c6c:	b1b0      	cbz	r0, 8007c9c <_svfiprintf_r+0x114>
 8007c6e:	9207      	str	r2, [sp, #28]
 8007c70:	e014      	b.n	8007c9c <_svfiprintf_r+0x114>
 8007c72:	eba0 0308 	sub.w	r3, r0, r8
 8007c76:	fa09 f303 	lsl.w	r3, r9, r3
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	46a2      	mov	sl, r4
 8007c80:	e7d2      	b.n	8007c28 <_svfiprintf_r+0xa0>
 8007c82:	9b03      	ldr	r3, [sp, #12]
 8007c84:	1d19      	adds	r1, r3, #4
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	9103      	str	r1, [sp, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bfbb      	ittet	lt
 8007c8e:	425b      	neglt	r3, r3
 8007c90:	f042 0202 	orrlt.w	r2, r2, #2
 8007c94:	9307      	strge	r3, [sp, #28]
 8007c96:	9307      	strlt	r3, [sp, #28]
 8007c98:	bfb8      	it	lt
 8007c9a:	9204      	strlt	r2, [sp, #16]
 8007c9c:	7823      	ldrb	r3, [r4, #0]
 8007c9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ca0:	d10a      	bne.n	8007cb8 <_svfiprintf_r+0x130>
 8007ca2:	7863      	ldrb	r3, [r4, #1]
 8007ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca6:	d132      	bne.n	8007d0e <_svfiprintf_r+0x186>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	1d1a      	adds	r2, r3, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	9203      	str	r2, [sp, #12]
 8007cb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cb4:	3402      	adds	r4, #2
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d7c <_svfiprintf_r+0x1f4>
 8007cbc:	7821      	ldrb	r1, [r4, #0]
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	f7f8 fa8d 	bl	80001e0 <memchr>
 8007cc6:	b138      	cbz	r0, 8007cd8 <_svfiprintf_r+0x150>
 8007cc8:	9b04      	ldr	r3, [sp, #16]
 8007cca:	eba0 000a 	sub.w	r0, r0, sl
 8007cce:	2240      	movs	r2, #64	@ 0x40
 8007cd0:	4082      	lsls	r2, r0
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	3401      	adds	r4, #1
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cdc:	4824      	ldr	r0, [pc, #144]	@ (8007d70 <_svfiprintf_r+0x1e8>)
 8007cde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ce2:	2206      	movs	r2, #6
 8007ce4:	f7f8 fa7c 	bl	80001e0 <memchr>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d036      	beq.n	8007d5a <_svfiprintf_r+0x1d2>
 8007cec:	4b21      	ldr	r3, [pc, #132]	@ (8007d74 <_svfiprintf_r+0x1ec>)
 8007cee:	bb1b      	cbnz	r3, 8007d38 <_svfiprintf_r+0x1b0>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	3307      	adds	r3, #7
 8007cf4:	f023 0307 	bic.w	r3, r3, #7
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfe:	4433      	add	r3, r6
 8007d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d02:	e76a      	b.n	8007bda <_svfiprintf_r+0x52>
 8007d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d08:	460c      	mov	r4, r1
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	e7a8      	b.n	8007c60 <_svfiprintf_r+0xd8>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	3401      	adds	r4, #1
 8007d12:	9305      	str	r3, [sp, #20]
 8007d14:	4619      	mov	r1, r3
 8007d16:	f04f 0c0a 	mov.w	ip, #10
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d20:	3a30      	subs	r2, #48	@ 0x30
 8007d22:	2a09      	cmp	r2, #9
 8007d24:	d903      	bls.n	8007d2e <_svfiprintf_r+0x1a6>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0c6      	beq.n	8007cb8 <_svfiprintf_r+0x130>
 8007d2a:	9105      	str	r1, [sp, #20]
 8007d2c:	e7c4      	b.n	8007cb8 <_svfiprintf_r+0x130>
 8007d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d32:	4604      	mov	r4, r0
 8007d34:	2301      	movs	r3, #1
 8007d36:	e7f0      	b.n	8007d1a <_svfiprintf_r+0x192>
 8007d38:	ab03      	add	r3, sp, #12
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	462a      	mov	r2, r5
 8007d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d78 <_svfiprintf_r+0x1f0>)
 8007d40:	a904      	add	r1, sp, #16
 8007d42:	4638      	mov	r0, r7
 8007d44:	f3af 8000 	nop.w
 8007d48:	1c42      	adds	r2, r0, #1
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	d1d6      	bne.n	8007cfc <_svfiprintf_r+0x174>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	065b      	lsls	r3, r3, #25
 8007d52:	f53f af2d 	bmi.w	8007bb0 <_svfiprintf_r+0x28>
 8007d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d58:	e72c      	b.n	8007bb4 <_svfiprintf_r+0x2c>
 8007d5a:	ab03      	add	r3, sp, #12
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	462a      	mov	r2, r5
 8007d60:	4b05      	ldr	r3, [pc, #20]	@ (8007d78 <_svfiprintf_r+0x1f0>)
 8007d62:	a904      	add	r1, sp, #16
 8007d64:	4638      	mov	r0, r7
 8007d66:	f000 f879 	bl	8007e5c <_printf_i>
 8007d6a:	e7ed      	b.n	8007d48 <_svfiprintf_r+0x1c0>
 8007d6c:	080081f4 	.word	0x080081f4
 8007d70:	080081fe 	.word	0x080081fe
 8007d74:	00000000 	.word	0x00000000
 8007d78:	08007ad1 	.word	0x08007ad1
 8007d7c:	080081fa 	.word	0x080081fa

08007d80 <_printf_common>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	4616      	mov	r6, r2
 8007d86:	4698      	mov	r8, r3
 8007d88:	688a      	ldr	r2, [r1, #8]
 8007d8a:	690b      	ldr	r3, [r1, #16]
 8007d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bfb8      	it	lt
 8007d94:	4613      	movlt	r3, r2
 8007d96:	6033      	str	r3, [r6, #0]
 8007d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b10a      	cbz	r2, 8007da6 <_printf_common+0x26>
 8007da2:	3301      	adds	r3, #1
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	0699      	lsls	r1, r3, #26
 8007daa:	bf42      	ittt	mi
 8007dac:	6833      	ldrmi	r3, [r6, #0]
 8007dae:	3302      	addmi	r3, #2
 8007db0:	6033      	strmi	r3, [r6, #0]
 8007db2:	6825      	ldr	r5, [r4, #0]
 8007db4:	f015 0506 	ands.w	r5, r5, #6
 8007db8:	d106      	bne.n	8007dc8 <_printf_common+0x48>
 8007dba:	f104 0a19 	add.w	sl, r4, #25
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	6832      	ldr	r2, [r6, #0]
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dc26      	bgt.n	8007e16 <_printf_common+0x96>
 8007dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	3b00      	subs	r3, #0
 8007dd0:	bf18      	it	ne
 8007dd2:	2301      	movne	r3, #1
 8007dd4:	0692      	lsls	r2, r2, #26
 8007dd6:	d42b      	bmi.n	8007e30 <_printf_common+0xb0>
 8007dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ddc:	4641      	mov	r1, r8
 8007dde:	4638      	mov	r0, r7
 8007de0:	47c8      	blx	r9
 8007de2:	3001      	adds	r0, #1
 8007de4:	d01e      	beq.n	8007e24 <_printf_common+0xa4>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	6922      	ldr	r2, [r4, #16]
 8007dea:	f003 0306 	and.w	r3, r3, #6
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	bf02      	ittt	eq
 8007df2:	68e5      	ldreq	r5, [r4, #12]
 8007df4:	6833      	ldreq	r3, [r6, #0]
 8007df6:	1aed      	subeq	r5, r5, r3
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	bf0c      	ite	eq
 8007dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e00:	2500      	movne	r5, #0
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bfc4      	itt	gt
 8007e06:	1a9b      	subgt	r3, r3, r2
 8007e08:	18ed      	addgt	r5, r5, r3
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	341a      	adds	r4, #26
 8007e0e:	42b5      	cmp	r5, r6
 8007e10:	d11a      	bne.n	8007e48 <_printf_common+0xc8>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e008      	b.n	8007e28 <_printf_common+0xa8>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	47c8      	blx	r9
 8007e20:	3001      	adds	r0, #1
 8007e22:	d103      	bne.n	8007e2c <_printf_common+0xac>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	e7c6      	b.n	8007dbe <_printf_common+0x3e>
 8007e30:	18e1      	adds	r1, r4, r3
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	2030      	movs	r0, #48	@ 0x30
 8007e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e3a:	4422      	add	r2, r4
 8007e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e44:	3302      	adds	r3, #2
 8007e46:	e7c7      	b.n	8007dd8 <_printf_common+0x58>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4641      	mov	r1, r8
 8007e4e:	4638      	mov	r0, r7
 8007e50:	47c8      	blx	r9
 8007e52:	3001      	adds	r0, #1
 8007e54:	d0e6      	beq.n	8007e24 <_printf_common+0xa4>
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7d9      	b.n	8007e0e <_printf_common+0x8e>
	...

08007e5c <_printf_i>:
 8007e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	7e0f      	ldrb	r7, [r1, #24]
 8007e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e64:	2f78      	cmp	r7, #120	@ 0x78
 8007e66:	4691      	mov	r9, r2
 8007e68:	4680      	mov	r8, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	469a      	mov	sl, r3
 8007e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e72:	d807      	bhi.n	8007e84 <_printf_i+0x28>
 8007e74:	2f62      	cmp	r7, #98	@ 0x62
 8007e76:	d80a      	bhi.n	8007e8e <_printf_i+0x32>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	f000 80d1 	beq.w	8008020 <_printf_i+0x1c4>
 8007e7e:	2f58      	cmp	r7, #88	@ 0x58
 8007e80:	f000 80b8 	beq.w	8007ff4 <_printf_i+0x198>
 8007e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e8c:	e03a      	b.n	8007f04 <_printf_i+0xa8>
 8007e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e92:	2b15      	cmp	r3, #21
 8007e94:	d8f6      	bhi.n	8007e84 <_printf_i+0x28>
 8007e96:	a101      	add	r1, pc, #4	@ (adr r1, 8007e9c <_printf_i+0x40>)
 8007e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007e85 	.word	0x08007e85
 8007ea8:	08007e85 	.word	0x08007e85
 8007eac:	08007e85 	.word	0x08007e85
 8007eb0:	08007e85 	.word	0x08007e85
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007e85 	.word	0x08007e85
 8007ebc:	08007e85 	.word	0x08007e85
 8007ec0:	08007e85 	.word	0x08007e85
 8007ec4:	08007e85 	.word	0x08007e85
 8007ec8:	08008007 	.word	0x08008007
 8007ecc:	08007f33 	.word	0x08007f33
 8007ed0:	08007fc1 	.word	0x08007fc1
 8007ed4:	08007e85 	.word	0x08007e85
 8007ed8:	08007e85 	.word	0x08007e85
 8007edc:	08008029 	.word	0x08008029
 8007ee0:	08007e85 	.word	0x08007e85
 8007ee4:	08007f33 	.word	0x08007f33
 8007ee8:	08007e85 	.word	0x08007e85
 8007eec:	08007e85 	.word	0x08007e85
 8007ef0:	08007fc9 	.word	0x08007fc9
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6032      	str	r2, [r6, #0]
 8007efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f04:	2301      	movs	r3, #1
 8007f06:	e09c      	b.n	8008042 <_printf_i+0x1e6>
 8007f08:	6833      	ldr	r3, [r6, #0]
 8007f0a:	6820      	ldr	r0, [r4, #0]
 8007f0c:	1d19      	adds	r1, r3, #4
 8007f0e:	6031      	str	r1, [r6, #0]
 8007f10:	0606      	lsls	r6, r0, #24
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0xbc>
 8007f14:	681d      	ldr	r5, [r3, #0]
 8007f16:	e003      	b.n	8007f20 <_printf_i+0xc4>
 8007f18:	0645      	lsls	r5, r0, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0xb8>
 8007f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	da03      	bge.n	8007f2c <_printf_i+0xd0>
 8007f24:	232d      	movs	r3, #45	@ 0x2d
 8007f26:	426d      	negs	r5, r5
 8007f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f2c:	4858      	ldr	r0, [pc, #352]	@ (8008090 <_printf_i+0x234>)
 8007f2e:	230a      	movs	r3, #10
 8007f30:	e011      	b.n	8007f56 <_printf_i+0xfa>
 8007f32:	6821      	ldr	r1, [r4, #0]
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	0608      	lsls	r0, r1, #24
 8007f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f3c:	d402      	bmi.n	8007f44 <_printf_i+0xe8>
 8007f3e:	0649      	lsls	r1, r1, #25
 8007f40:	bf48      	it	mi
 8007f42:	b2ad      	uxthmi	r5, r5
 8007f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f46:	4852      	ldr	r0, [pc, #328]	@ (8008090 <_printf_i+0x234>)
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	bf14      	ite	ne
 8007f4c:	230a      	movne	r3, #10
 8007f4e:	2308      	moveq	r3, #8
 8007f50:	2100      	movs	r1, #0
 8007f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f56:	6866      	ldr	r6, [r4, #4]
 8007f58:	60a6      	str	r6, [r4, #8]
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	db05      	blt.n	8007f6a <_printf_i+0x10e>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	432e      	orrs	r6, r5
 8007f62:	f021 0104 	bic.w	r1, r1, #4
 8007f66:	6021      	str	r1, [r4, #0]
 8007f68:	d04b      	beq.n	8008002 <_printf_i+0x1a6>
 8007f6a:	4616      	mov	r6, r2
 8007f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f70:	fb03 5711 	mls	r7, r3, r1, r5
 8007f74:	5dc7      	ldrb	r7, [r0, r7]
 8007f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f7a:	462f      	mov	r7, r5
 8007f7c:	42bb      	cmp	r3, r7
 8007f7e:	460d      	mov	r5, r1
 8007f80:	d9f4      	bls.n	8007f6c <_printf_i+0x110>
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d10b      	bne.n	8007f9e <_printf_i+0x142>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	07df      	lsls	r7, r3, #31
 8007f8a:	d508      	bpl.n	8007f9e <_printf_i+0x142>
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	6861      	ldr	r1, [r4, #4]
 8007f90:	4299      	cmp	r1, r3
 8007f92:	bfde      	ittt	le
 8007f94:	2330      	movle	r3, #48	@ 0x30
 8007f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f9e:	1b92      	subs	r2, r2, r6
 8007fa0:	6122      	str	r2, [r4, #16]
 8007fa2:	f8cd a000 	str.w	sl, [sp]
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	aa03      	add	r2, sp, #12
 8007faa:	4621      	mov	r1, r4
 8007fac:	4640      	mov	r0, r8
 8007fae:	f7ff fee7 	bl	8007d80 <_printf_common>
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d14a      	bne.n	800804c <_printf_i+0x1f0>
 8007fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fba:	b004      	add	sp, #16
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	f043 0320 	orr.w	r3, r3, #32
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	4832      	ldr	r0, [pc, #200]	@ (8008094 <_printf_i+0x238>)
 8007fca:	2778      	movs	r7, #120	@ 0x78
 8007fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	6831      	ldr	r1, [r6, #0]
 8007fd4:	061f      	lsls	r7, r3, #24
 8007fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fda:	d402      	bmi.n	8007fe2 <_printf_i+0x186>
 8007fdc:	065f      	lsls	r7, r3, #25
 8007fde:	bf48      	it	mi
 8007fe0:	b2ad      	uxthmi	r5, r5
 8007fe2:	6031      	str	r1, [r6, #0]
 8007fe4:	07d9      	lsls	r1, r3, #31
 8007fe6:	bf44      	itt	mi
 8007fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8007fec:	6023      	strmi	r3, [r4, #0]
 8007fee:	b11d      	cbz	r5, 8007ff8 <_printf_i+0x19c>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	e7ad      	b.n	8007f50 <_printf_i+0xf4>
 8007ff4:	4826      	ldr	r0, [pc, #152]	@ (8008090 <_printf_i+0x234>)
 8007ff6:	e7e9      	b.n	8007fcc <_printf_i+0x170>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	f023 0320 	bic.w	r3, r3, #32
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	e7f6      	b.n	8007ff0 <_printf_i+0x194>
 8008002:	4616      	mov	r6, r2
 8008004:	e7bd      	b.n	8007f82 <_printf_i+0x126>
 8008006:	6833      	ldr	r3, [r6, #0]
 8008008:	6825      	ldr	r5, [r4, #0]
 800800a:	6961      	ldr	r1, [r4, #20]
 800800c:	1d18      	adds	r0, r3, #4
 800800e:	6030      	str	r0, [r6, #0]
 8008010:	062e      	lsls	r6, r5, #24
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	d501      	bpl.n	800801a <_printf_i+0x1be>
 8008016:	6019      	str	r1, [r3, #0]
 8008018:	e002      	b.n	8008020 <_printf_i+0x1c4>
 800801a:	0668      	lsls	r0, r5, #25
 800801c:	d5fb      	bpl.n	8008016 <_printf_i+0x1ba>
 800801e:	8019      	strh	r1, [r3, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	4616      	mov	r6, r2
 8008026:	e7bc      	b.n	8007fa2 <_printf_i+0x146>
 8008028:	6833      	ldr	r3, [r6, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	6032      	str	r2, [r6, #0]
 800802e:	681e      	ldr	r6, [r3, #0]
 8008030:	6862      	ldr	r2, [r4, #4]
 8008032:	2100      	movs	r1, #0
 8008034:	4630      	mov	r0, r6
 8008036:	f7f8 f8d3 	bl	80001e0 <memchr>
 800803a:	b108      	cbz	r0, 8008040 <_printf_i+0x1e4>
 800803c:	1b80      	subs	r0, r0, r6
 800803e:	6060      	str	r0, [r4, #4]
 8008040:	6863      	ldr	r3, [r4, #4]
 8008042:	6123      	str	r3, [r4, #16]
 8008044:	2300      	movs	r3, #0
 8008046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800804a:	e7aa      	b.n	8007fa2 <_printf_i+0x146>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	4632      	mov	r2, r6
 8008050:	4649      	mov	r1, r9
 8008052:	4640      	mov	r0, r8
 8008054:	47d0      	blx	sl
 8008056:	3001      	adds	r0, #1
 8008058:	d0ad      	beq.n	8007fb6 <_printf_i+0x15a>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	079b      	lsls	r3, r3, #30
 800805e:	d413      	bmi.n	8008088 <_printf_i+0x22c>
 8008060:	68e0      	ldr	r0, [r4, #12]
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	4298      	cmp	r0, r3
 8008066:	bfb8      	it	lt
 8008068:	4618      	movlt	r0, r3
 800806a:	e7a6      	b.n	8007fba <_printf_i+0x15e>
 800806c:	2301      	movs	r3, #1
 800806e:	4632      	mov	r2, r6
 8008070:	4649      	mov	r1, r9
 8008072:	4640      	mov	r0, r8
 8008074:	47d0      	blx	sl
 8008076:	3001      	adds	r0, #1
 8008078:	d09d      	beq.n	8007fb6 <_printf_i+0x15a>
 800807a:	3501      	adds	r5, #1
 800807c:	68e3      	ldr	r3, [r4, #12]
 800807e:	9903      	ldr	r1, [sp, #12]
 8008080:	1a5b      	subs	r3, r3, r1
 8008082:	42ab      	cmp	r3, r5
 8008084:	dcf2      	bgt.n	800806c <_printf_i+0x210>
 8008086:	e7eb      	b.n	8008060 <_printf_i+0x204>
 8008088:	2500      	movs	r5, #0
 800808a:	f104 0619 	add.w	r6, r4, #25
 800808e:	e7f5      	b.n	800807c <_printf_i+0x220>
 8008090:	08008205 	.word	0x08008205
 8008094:	08008216 	.word	0x08008216

08008098 <memmove>:
 8008098:	4288      	cmp	r0, r1
 800809a:	b510      	push	{r4, lr}
 800809c:	eb01 0402 	add.w	r4, r1, r2
 80080a0:	d902      	bls.n	80080a8 <memmove+0x10>
 80080a2:	4284      	cmp	r4, r0
 80080a4:	4623      	mov	r3, r4
 80080a6:	d807      	bhi.n	80080b8 <memmove+0x20>
 80080a8:	1e43      	subs	r3, r0, #1
 80080aa:	42a1      	cmp	r1, r4
 80080ac:	d008      	beq.n	80080c0 <memmove+0x28>
 80080ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080b6:	e7f8      	b.n	80080aa <memmove+0x12>
 80080b8:	4402      	add	r2, r0
 80080ba:	4601      	mov	r1, r0
 80080bc:	428a      	cmp	r2, r1
 80080be:	d100      	bne.n	80080c2 <memmove+0x2a>
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ca:	e7f7      	b.n	80080bc <memmove+0x24>

080080cc <_sbrk_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d06      	ldr	r5, [pc, #24]	@ (80080e8 <_sbrk_r+0x1c>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7f8 fd4c 	bl	8000b74 <_sbrk>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_sbrk_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_sbrk_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20001f74 	.word	0x20001f74

080080ec <memcpy>:
 80080ec:	440a      	add	r2, r1
 80080ee:	4291      	cmp	r1, r2
 80080f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f4:	d100      	bne.n	80080f8 <memcpy+0xc>
 80080f6:	4770      	bx	lr
 80080f8:	b510      	push	{r4, lr}
 80080fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008102:	4291      	cmp	r1, r2
 8008104:	d1f9      	bne.n	80080fa <memcpy+0xe>
 8008106:	bd10      	pop	{r4, pc}

08008108 <_realloc_r>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	4607      	mov	r7, r0
 800810e:	4614      	mov	r4, r2
 8008110:	460d      	mov	r5, r1
 8008112:	b921      	cbnz	r1, 800811e <_realloc_r+0x16>
 8008114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	4611      	mov	r1, r2
 800811a:	f7ff bc4d 	b.w	80079b8 <_malloc_r>
 800811e:	b92a      	cbnz	r2, 800812c <_realloc_r+0x24>
 8008120:	f7ff fbde 	bl	80078e0 <_free_r>
 8008124:	4625      	mov	r5, r4
 8008126:	4628      	mov	r0, r5
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	f000 f81a 	bl	8008164 <_malloc_usable_size_r>
 8008130:	4284      	cmp	r4, r0
 8008132:	4606      	mov	r6, r0
 8008134:	d802      	bhi.n	800813c <_realloc_r+0x34>
 8008136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800813a:	d8f4      	bhi.n	8008126 <_realloc_r+0x1e>
 800813c:	4621      	mov	r1, r4
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff fc3a 	bl	80079b8 <_malloc_r>
 8008144:	4680      	mov	r8, r0
 8008146:	b908      	cbnz	r0, 800814c <_realloc_r+0x44>
 8008148:	4645      	mov	r5, r8
 800814a:	e7ec      	b.n	8008126 <_realloc_r+0x1e>
 800814c:	42b4      	cmp	r4, r6
 800814e:	4622      	mov	r2, r4
 8008150:	4629      	mov	r1, r5
 8008152:	bf28      	it	cs
 8008154:	4632      	movcs	r2, r6
 8008156:	f7ff ffc9 	bl	80080ec <memcpy>
 800815a:	4629      	mov	r1, r5
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff fbbf 	bl	80078e0 <_free_r>
 8008162:	e7f1      	b.n	8008148 <_realloc_r+0x40>

08008164 <_malloc_usable_size_r>:
 8008164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008168:	1f18      	subs	r0, r3, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfbc      	itt	lt
 800816e:	580b      	ldrlt	r3, [r1, r0]
 8008170:	18c0      	addlt	r0, r0, r3
 8008172:	4770      	bx	lr

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
